{
  "address": "0x7141fF4Fe20D805D1520f8Bb5CFc88d311804Ab8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract DEXFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa82a00d145842d12a6a3857df8540dd77f69eb4b4ef90dd8fc846bdcc49dd67e",
  "receipt": {
    "to": null,
    "from": "0xAA4ADd68289429Ace79b8c8219E733a6667A5F5c",
    "contractAddress": "0x7141fF4Fe20D805D1520f8Bb5CFc88d311804Ab8",
    "transactionIndex": 1,
    "gasUsed": "856828",
    "logsBloom": "0x
    "blockHash": "0x4e8b504ef5ee8a726721a54d22fcb4e8b1040ac8073ef5460238ff96cd261443",
    "transactionHash": "0xa82a00d145842d12a6a3857df8540dd77f69eb4b4ef90dd8fc846bdcc49dd67e",
    "logs": [],
    "blockNumber": 27987058,
    "cumulativeGasUsed": "902936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbbFfF35F9203707c80b46C3B8F8aCEAa7d12C67A"
  ],
  "numDeployments": 1,
  "solcInputHash": "e6874775def4ea22c2b8f71dc892b17e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract DEXFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enables swapping through path: TokenA -> TokenB -> TokenC\",\"kind\":\"dev\",\"methods\":{\"getAmountsOut(uint256,address[])\":{\"params\":{\"amountIn\":\"Input amount\",\"path\":\"Array of token addresses\"},\"returns\":{\"amounts\":\"Array of output amounts for each step\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountIn\":\"Input amount\",\"minAmountOut\":\"Minimum output amount (slippage protection)\",\"path\":\"Array of token addresses (e.g., [TokenA, TokenB, TokenC])\",\"to\":\"Recipient address\"},\"returns\":{\"amounts\":\"Array of amounts for each swap in the path\"}}},\"title\":\"DEXRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountsOut(uint256,address[])\":{\"notice\":\"Get amounts out for a given input through a path\"},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swap exact tokens for tokens through a specified path\"}},\"notice\":\"Router contract for multi-hop swaps through multiple pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXRouter.sol\":\"DEXRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SimpleDEXV2.sol\\\";\\n\\n/**\\n * @title DEXFactory\\n * @notice Factory contract to create and manage multiple DEX pairs\\n * @dev Inspired by Uniswap V2 Factory pattern\\n */\\ncontract DEXFactory {\\n    // Mapping to track all created pairs: token0 => token1 => pair address\\n    mapping(address => mapping(address => address)) public getPair;\\n\\n    // Array of all pairs created\\n    address[] public allPairs;\\n\\n    // Events\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256 pairCount\\n    );\\n\\n    /**\\n     * @notice Create a new DEX pair for two tokens\\n     * @param tokenA Address of first token\\n     * @param tokenB Address of second token\\n     * @return pair Address of the created DEX pair\\n     */\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"DEXFactory: IDENTICAL_ADDRESSES\\\");\\n\\n        // Sort tokens to ensure consistent pair addressing\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n\\n        require(token0 != address(0), \\\"DEXFactory: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"DEXFactory: PAIR_EXISTS\\\");\\n\\n        // Deploy new SimpleDEXV2 contract\\n        SimpleDEXV2 dex = new SimpleDEXV2(token0, token1);\\n        pair = address(dex);\\n\\n        // Populate mapping in both directions\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /**\\n     * @notice Get total number of pairs created\\n     * @return Total pair count\\n     */\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n}\\n\",\"keccak256\":\"0xb909c37352b9b4a77406e4636a37f211f47550bfddb18cd7b9c54d5c82b75594\",\"license\":\"MIT\"},\"contracts/DEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DEXFactory.sol\\\";\\nimport \\\"./SimpleDEXV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title DEXRouter\\n * @notice Router contract for multi-hop swaps through multiple pairs\\n * @dev Enables swapping through path: TokenA -> TokenB -> TokenC\\n */\\ncontract DEXRouter {\\n    DEXFactory public immutable factory;\\n\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Invalid factory address\\\");\\n        factory = DEXFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice Swap exact tokens for tokens through a specified path\\n     * @param amountIn Input amount\\n     * @param minAmountOut Minimum output amount (slippage protection)\\n     * @param path Array of token addresses (e.g., [TokenA, TokenB, TokenC])\\n     * @param to Recipient address\\n     * @return amounts Array of amounts for each swap in the path\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to\\n    ) external returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"DEXRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n\\n        // Transfer initial tokens from sender to first pair\\n        IERC20(path[0]).transferFrom(\\n            msg.sender,\\n            factory.getPair(path[0], path[1]),\\n            amountIn\\n        );\\n\\n        // Execute swaps along the path\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address pair = factory.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), \\\"DEXRouter: PAIR_NOT_EXISTS\\\");\\n\\n            SimpleDEXV2 dex = SimpleDEXV2(pair);\\n\\n            // Get swap amount\\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\\n\\n            // Determine recipient (next pair or final recipient)\\n            address recipient = i < path.length - 2\\n                ? factory.getPair(path[i + 1], path[i + 2])\\n                : to;\\n\\n            // Execute swap\\n            dex.swap(path[i], amounts[i], 0); // minAmountOut checked at the end\\n\\n            // Transfer output to recipient\\n            IERC20(path[i + 1]).transfer(recipient, amounts[i + 1]);\\n        }\\n\\n        // Check final output meets minimum\\n        require(\\n            amounts[amounts.length - 1] >= minAmountOut,\\n            \\\"DEXRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Get amounts out for a given input through a path\\n     * @param amountIn Input amount\\n     * @param path Array of token addresses\\n     * @return amounts Array of output amounts for each step\\n     */\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path.length >= 2, \\\"DEXRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address pair = factory.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), \\\"DEXRouter: PAIR_NOT_EXISTS\\\");\\n\\n            SimpleDEXV2 dex = SimpleDEXV2(pair);\\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77332f1ce2ab3233d904f2f383ae0782b0605422729bc62a0a76d1748ad94a52\",\"license\":\"MIT\"},\"contracts/SimpleDEXV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleDEXV2\\n * @notice Advanced DEX with ERC20 LP tokens, fee distribution, TWAP, and slippage protection\\n * @dev Upgraded version with all advanced features\\n */\\ncontract SimpleDEXV2 is ERC20, ReentrancyGuard {\\n    // Token addresses\\n    IERC20 public immutable tokenA;\\n    IERC20 public immutable tokenB;\\n\\n    // Pool reserves\\n    uint256 public reserveA;\\n    uint256 public reserveB;\\n\\n    // Fee tracking (0.3% = 3/1000)\\n    uint256 public constant FEE_NUMERATOR = 3;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    // Accumulated fees for LP providers\\n    uint256 public accumulatedFeesA;\\n    uint256 public accumulatedFeesB;\\n\\n    // TWAP: Time-Weighted Average Price Oracle\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 priceACumulative;\\n        uint256 priceBCumulative;\\n    }\\n    Observation[] public observations;\\n    uint256 private constant OBSERVATION_WINDOW = 24 hours;\\n\\n    // Last price update timestamp\\n    uint256 public lastPriceUpdate;\\n\\n    // Events\\n    event LiquidityAdded(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityMinted\\n    );\\n    event LiquidityRemoved(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityBurned\\n    );\\n    event Swap(\\n        address indexed user,\\n        address indexed tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 priceImpact\\n    );\\n    event FeesClaimed(\\n        address indexed provider,\\n        uint256 feeA,\\n        uint256 feeB\\n    );\\n\\n    /**\\n     * @notice Constructor sets the token pair and creates LP token\\n     * @param _tokenA Address of first token\\n     * @param _tokenB Address of second token\\n     */\\n    constructor(address _tokenA, address _tokenB)\\n        ERC20(\\\"SimpleDEX LP\\\", \\\"SLP-LP\\\")\\n    {\\n        require(_tokenA != address(0) && _tokenB != address(0), \\\"Invalid token address\\\");\\n        require(_tokenA != _tokenB, \\\"Tokens must be different\\\");\\n\\n        tokenA = IERC20(_tokenA);\\n        tokenB = IERC20(_tokenB);\\n        lastPriceUpdate = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param amountA Amount of token A to add\\n     * @param amountB Amount of token B to add\\n     * @return liquidityMinted Amount of LP tokens minted\\n     */\\n    function addLiquidity(uint256 amountA, uint256 amountB)\\n        external\\n        nonReentrant\\n        returns (uint256 liquidityMinted)\\n    {\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n        // Update TWAP before changing reserves\\n        _updatePrice();\\n\\n        // Transfer tokens from user to contract\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\n\\n        // Calculate liquidity to mint\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\\n            liquidityMinted = _sqrt(amountA * amountB);\\n        } else {\\n            // Subsequent liquidity: maintain pool ratio\\n            uint256 liquidityA = (amountA * _totalSupply) / reserveA;\\n            uint256 liquidityB = (amountB * _totalSupply) / reserveB;\\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\\n        }\\n\\n        require(liquidityMinted > 0, \\\"Insufficient liquidity minted\\\");\\n\\n        // Mint LP tokens to user\\n        _mint(msg.sender, liquidityMinted);\\n\\n        // Update reserves\\n        reserveA += amountA;\\n        reserveB += amountB;\\n\\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool\\n     * @param liquidityAmount Amount of LP tokens to burn\\n     * @return amountA Amount of token A returned\\n     * @return amountB Amount of token B returned\\n     */\\n    function removeLiquidity(uint256 liquidityAmount)\\n        external\\n        nonReentrant\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        require(liquidityAmount > 0, \\\"Amount must be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= liquidityAmount, \\\"Insufficient liquidity\\\");\\n\\n        // Update TWAP before changing reserves\\n        _updatePrice();\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        // Calculate amounts to return (proportional to share)\\n        amountA = (liquidityAmount * reserveA) / _totalSupply;\\n        amountB = (liquidityAmount * reserveB) / _totalSupply;\\n\\n        require(amountA > 0 && amountB > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Burn LP tokens\\n        _burn(msg.sender, liquidityAmount);\\n\\n        // Update reserves\\n        reserveA -= amountA;\\n        reserveB -= amountB;\\n\\n        // Transfer tokens back to user\\n        tokenA.transfer(msg.sender, amountA);\\n        tokenB.transfer(msg.sender, amountB);\\n\\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\\n    }\\n\\n    /**\\n     * @notice Swap one token for another with slippage protection\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @param minAmountOut Minimum output amount (slippage protection)\\n     * @return amountOut Amount of token received\\n     */\\n    function swap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) external nonReentrant returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        // Update TWAP before swap\\n        _updatePrice();\\n\\n        // Determine input/output tokens and reserves\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        // Calculate price impact BEFORE swap\\n        uint256 priceImpact = _calculatePriceImpact(amountIn, reserveIn, reserveOut);\\n\\n        // Transfer input token from user\\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\\n\\n        // Calculate output amount with fee\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n\\n        require(amountOut > 0, \\\"Insufficient output amount\\\");\\n        require(amountOut >= minAmountOut, \\\"Slippage exceeded\\\");\\n        require(amountOut < reserveOut, \\\"Insufficient liquidity\\\");\\n\\n        // Calculate fee\\n        uint256 feeAmount = (amountIn * FEE_NUMERATOR) / FEE_DENOMINATOR;\\n\\n        // Update accumulated fees\\n        if (isTokenA) {\\n            accumulatedFeesA += feeAmount;\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            accumulatedFeesB += feeAmount;\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n\\n        // Transfer output token to user\\n        tokenOutContract.transfer(msg.sender, amountOut);\\n\\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut, priceImpact);\\n    }\\n\\n    /**\\n     * @notice Claim accumulated fees proportional to LP share\\n     * @return feeA Amount of token A fees claimed\\n     * @return feeB Amount of token B fees claimed\\n     */\\n    function claimFees() external nonReentrant returns (uint256 feeA, uint256 feeB) {\\n        uint256 userBalance = balanceOf(msg.sender);\\n        require(userBalance > 0, \\\"No liquidity\\\");\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        // Calculate user's share of fees\\n        uint256 userShare = (userBalance * 10000) / _totalSupply;\\n        feeA = (accumulatedFeesA * userShare) / 10000;\\n        feeB = (accumulatedFeesB * userShare) / 10000;\\n\\n        require(feeA > 0 || feeB > 0, \\\"No fees to claim\\\");\\n\\n        // Transfer fees to user\\n        if (feeA > 0) {\\n            tokenA.transfer(msg.sender, feeA);\\n        }\\n        if (feeB > 0) {\\n            tokenB.transfer(msg.sender, feeB);\\n        }\\n\\n        emit FeesClaimed(msg.sender, feeA, feeB);\\n    }\\n\\n    /**\\n     * @notice Calculate swap output amount (view function)\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @return amountOut Estimated amount of token to receive\\n     */\\n    function getSwapAmount(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Get current pool state\\n     */\\n    function getReserves()\\n        external\\n        view\\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\\n    {\\n        return (reserveA, reserveB, totalSupply());\\n    }\\n\\n    /**\\n     * @notice Get user's liquidity position\\n     */\\n    function getUserLiquidity(address user)\\n        external\\n        view\\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\\n    {\\n        liquidityAmount = balanceOf(user);\\n        uint256 _totalSupply = totalSupply();\\n        sharePercentage = _totalSupply > 0\\n            ? (liquidityAmount * 10000) / _totalSupply\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Calculate price impact of a swap\\n     * @param amountIn Input amount\\n     * @param tokenIn Address of token to swap in\\n     * @return priceImpact Price impact in basis points (e.g., 500 = 5%)\\n     */\\n    function calculatePriceImpact(\\n        uint256 amountIn,\\n        address tokenIn\\n    ) external view returns (uint256 priceImpact) {\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        return _calculatePriceImpact(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice Internal function to calculate price impact\\n     */\\n    function _calculatePriceImpact(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        // Price impact = ((outputAmount * reserveIn) / (inputAmount * reserveOut) - 1) * 100\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        uint256 outputAmount = numerator / denominator;\\n\\n        // Calculate price impact in basis points\\n        uint256 idealOutput = (amountIn * reserveOut) / reserveIn;\\n        if (idealOutput == 0) return 0;\\n\\n        uint256 impact = ((idealOutput - outputAmount) * 10000) / idealOutput;\\n        return impact;\\n    }\\n\\n    /**\\n     * @notice Update TWAP price observations\\n     */\\n    function _updatePrice() internal {\\n        uint256 timeElapsed = block.timestamp - lastPriceUpdate;\\n\\n        if (timeElapsed > 0 && reserveA > 0 && reserveB > 0) {\\n            // Calculate cumulative prices\\n            uint256 priceACumulative = (reserveB * 1e18) / reserveA;\\n            uint256 priceBCumulative = (reserveA * 1e18) / reserveB;\\n\\n            // Add observation\\n            observations.push(Observation({\\n                timestamp: block.timestamp,\\n                priceACumulative: priceACumulative,\\n                priceBCumulative: priceBCumulative\\n            }));\\n\\n            // Remove old observations (keep only last 24 hours)\\n            _pruneOldObservations();\\n\\n            lastPriceUpdate = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove observations older than OBSERVATION_WINDOW\\n     */\\n    function _pruneOldObservations() internal {\\n        uint256 cutoffTime = block.timestamp - OBSERVATION_WINDOW;\\n        uint256 i = 0;\\n\\n        while (i < observations.length && observations[i].timestamp < cutoffTime) {\\n            i++;\\n        }\\n\\n        if (i > 0) {\\n            for (uint256 j = 0; j < observations.length - i; j++) {\\n                observations[j] = observations[j + i];\\n            }\\n            for (uint256 k = 0; k < i; k++) {\\n                observations.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get TWAP for a specific period\\n     * @param period Time period in seconds\\n     * @return twapPriceA Time-weighted average price of A in terms of B\\n     * @return twapPriceB Time-weighted average price of B in terms of A\\n     */\\n    function getTWAP(uint256 period)\\n        external\\n        view\\n        returns (uint256 twapPriceA, uint256 twapPriceB)\\n    {\\n        require(observations.length >= 2, \\\"Insufficient observations\\\");\\n        require(period <= OBSERVATION_WINDOW, \\\"Period too long\\\");\\n\\n        uint256 targetTime = block.timestamp - period;\\n\\n        // Find oldest observation within period\\n        uint256 oldestIndex = observations.length - 1;\\n        for (uint256 i = 0; i < observations.length; i++) {\\n            if (observations[i].timestamp >= targetTime) {\\n                oldestIndex = i;\\n                break;\\n            }\\n        }\\n\\n        Observation memory oldest = observations[oldestIndex];\\n        Observation memory newest = observations[observations.length - 1];\\n\\n        uint256 timeElapsed = newest.timestamp - oldest.timestamp;\\n        require(timeElapsed > 0, \\\"No time elapsed\\\");\\n\\n        twapPriceA = (newest.priceACumulative - oldest.priceACumulative) / timeElapsed;\\n        twapPriceB = (newest.priceBCumulative - oldest.priceBCumulative) / timeElapsed;\\n    }\\n\\n    /**\\n     * @notice Square root function (Babylonian method)\\n     */\\n    function _sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 z = (x + 1) / 2;\\n        uint256 y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        return y;\\n    }\\n}\\n\",\"keccak256\":\"0xb52dd7097ad7341402966ab47bbcbef030c1ea642cb15fee4e450af7fb59c2ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f7e380380610f7e83398101604081905261002f9161009a565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420666163746f72792061646472657373000000000000000000604482015260640160405180910390fd5b6001600160a01b03166080526100ca565b6000602082840312156100ac57600080fd5b81516001600160a01b03811681146100c357600080fd5b9392505050565b608051610e7e610100600039600081816074015281816101b10152818161032f0152818161058801526109920152610e7e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610c4a565b6100c1565b6040516100669190610cb5565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610cf9565b6108c7565b606060028310156101135760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b60448201526064015b60405180910390fd5b8267ffffffffffffffff81111561012c5761012c610d45565b604051908082528060200260200182016040528015610155578160200160208202803683370190505b509050858160008151811061016c5761016c610d5b565b6020026020010181815250508383600081811061018b5761018b610d5b565b90506020020160208101906101a09190610d71565b6001600160a01b03166323b872dd337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a43905888860008181106101f1576101f1610d5b565b90506020020160208101906102069190610d71565b8989600181811061021957610219610d5b565b905060200201602081019061022e9190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610d95565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018990526064016020604051808303816000875af11580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610db2565b5060005b610324600185610dea565b8110156108395760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390587878581811061036e5761036e610d5b565b90506020020160208101906103839190610d71565b8888610390876001610e03565b81811061039f5761039f610d5b565b90506020020160208101906103b49190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610d95565b90506001600160a01b03811661047b5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db88888681811061049d5761049d610d5b565b90506020020160208101906104b29190610d71565b8686815181106104c4576104c4610d5b565b60200260200101516040518363ffffffff1660e01b81526004016104fd9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610e16565b8461054a856001610e03565b8151811061055a5761055a610d5b565b60209081029190910101526000610572600288610dea565b841061057e578561067e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e6a4390589896105ba886001610e03565b8181106105c9576105c9610d5b565b90506020020160208101906105de9190610d71565b8a8a6105eb896002610e03565b8181106105fa576105fa610d5b565b905060200201602081019061060f9190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610d95565b9050816001600160a01b0316639f1d0f598989878181106106a1576106a1610d5b565b90506020020160208101906106b69190610d71565b8787815181106106c8576106c8610d5b565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190610e16565b508787610757866001610e03565b81811061076657610766610d5b565b905060200201602081019061077b9190610d71565b6001600160a01b031663a9059cbb8287610796886001610e03565b815181106107a6576107a6610d5b565b60200260200101516040518363ffffffff1660e01b81526004016107df9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610db2565b50505050808061083190610e2f565b915050610319565b5084816001835161084a9190610dea565b8151811061085a5761085a610d5b565b602002602001015110156108be5760405162461bcd60e51b815260206004820152602560248201527f444558526f757465723a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161010a565b95945050505050565b606060028210156109145760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b604482015260640161010a565b8167ffffffffffffffff81111561092d5761092d610d45565b604051908082528060200260200182016040528015610956578160200160208202803683370190505b509050838160008151811061096d5761096d610d5b565b60200260200101818152505060005b610987600184610dea565b811015610bde5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058686858181106109d1576109d1610d5b565b90506020020160208101906109e69190610d71565b87876109f3876001610e03565b818110610a0257610a02610d5b565b9050602002016020810190610a179190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190610d95565b90506001600160a01b038116610ade5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db878786818110610b0057610b00610d5b565b9050602002016020810190610b159190610d71565b868681518110610b2757610b27610d5b565b60200260200101516040518363ffffffff1660e01b8152600401610b609291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190610e16565b84610bad856001610e03565b81518110610bbd57610bbd610d5b565b60200260200101818152505050508080610bd690610e2f565b91505061097c565b509392505050565b60008083601f840112610bf857600080fd5b50813567ffffffffffffffff811115610c1057600080fd5b6020830191508360208260051b8501011115610c2b57600080fd5b9250929050565b6001600160a01b0381168114610c4757600080fd5b50565b600080600080600060808688031215610c6257600080fd5b8535945060208601359350604086013567ffffffffffffffff811115610c8757600080fd5b610c9388828901610be6565b9094509250506060860135610ca781610c32565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610ced57835183529284019291840191600101610cd1565b50909695505050505050565b600080600060408486031215610d0e57600080fd5b83359250602084013567ffffffffffffffff811115610d2c57600080fd5b610d3886828701610be6565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d8357600080fd5b8135610d8e81610c32565b9392505050565b600060208284031215610da757600080fd5b8151610d8e81610c32565b600060208284031215610dc457600080fd5b81518015158114610d8e57600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610dfd57610dfd610dd4565b92915050565b80820180821115610dfd57610dfd610dd4565b600060208284031215610e2857600080fd5b5051919050565b600060018201610e4157610e41610dd4565b506001019056fea26469706673582212207714b3271da3c6349c0cba8faffcb2f1ce84d1761bf7262a189a96b147bddd3764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610c4a565b6100c1565b6040516100669190610cb5565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610cf9565b6108c7565b606060028310156101135760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b60448201526064015b60405180910390fd5b8267ffffffffffffffff81111561012c5761012c610d45565b604051908082528060200260200182016040528015610155578160200160208202803683370190505b509050858160008151811061016c5761016c610d5b565b6020026020010181815250508383600081811061018b5761018b610d5b565b90506020020160208101906101a09190610d71565b6001600160a01b03166323b872dd337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a43905888860008181106101f1576101f1610d5b565b90506020020160208101906102069190610d71565b8989600181811061021957610219610d5b565b905060200201602081019061022e9190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610d95565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018990526064016020604051808303816000875af11580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610db2565b5060005b610324600185610dea565b8110156108395760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390587878581811061036e5761036e610d5b565b90506020020160208101906103839190610d71565b8888610390876001610e03565b81811061039f5761039f610d5b565b90506020020160208101906103b49190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610d95565b90506001600160a01b03811661047b5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db88888681811061049d5761049d610d5b565b90506020020160208101906104b29190610d71565b8686815181106104c4576104c4610d5b565b60200260200101516040518363ffffffff1660e01b81526004016104fd9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610e16565b8461054a856001610e03565b8151811061055a5761055a610d5b565b60209081029190910101526000610572600288610dea565b841061057e578561067e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e6a4390589896105ba886001610e03565b8181106105c9576105c9610d5b565b90506020020160208101906105de9190610d71565b8a8a6105eb896002610e03565b8181106105fa576105fa610d5b565b905060200201602081019061060f9190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610d95565b9050816001600160a01b0316639f1d0f598989878181106106a1576106a1610d5b565b90506020020160208101906106b69190610d71565b8787815181106106c8576106c8610d5b565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016020604051808303816000875af1158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190610e16565b508787610757866001610e03565b81811061076657610766610d5b565b905060200201602081019061077b9190610d71565b6001600160a01b031663a9059cbb8287610796886001610e03565b815181106107a6576107a6610d5b565b60200260200101516040518363ffffffff1660e01b81526004016107df9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610db2565b50505050808061083190610e2f565b915050610319565b5084816001835161084a9190610dea565b8151811061085a5761085a610d5b565b602002602001015110156108be5760405162461bcd60e51b815260206004820152602560248201527f444558526f757465723a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161010a565b95945050505050565b606060028210156109145760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b604482015260640161010a565b8167ffffffffffffffff81111561092d5761092d610d45565b604051908082528060200260200182016040528015610956578160200160208202803683370190505b509050838160008151811061096d5761096d610d5b565b60200260200101818152505060005b610987600184610dea565b811015610bde5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058686858181106109d1576109d1610d5b565b90506020020160208101906109e69190610d71565b87876109f3876001610e03565b818110610a0257610a02610d5b565b9050602002016020810190610a179190610d71565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190610d95565b90506001600160a01b038116610ade5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db878786818110610b0057610b00610d5b565b9050602002016020810190610b159190610d71565b868681518110610b2757610b27610d5b565b60200260200101516040518363ffffffff1660e01b8152600401610b609291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190610e16565b84610bad856001610e03565b81518110610bbd57610bbd610d5b565b60200260200101818152505050508080610bd690610e2f565b91505061097c565b509392505050565b60008083601f840112610bf857600080fd5b50813567ffffffffffffffff811115610c1057600080fd5b6020830191508360208260051b8501011115610c2b57600080fd5b9250929050565b6001600160a01b0381168114610c4757600080fd5b50565b600080600080600060808688031215610c6257600080fd5b8535945060208601359350604086013567ffffffffffffffff811115610c8757600080fd5b610c9388828901610be6565b9094509250506060860135610ca781610c32565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610ced57835183529284019291840191600101610cd1565b50909695505050505050565b600080600060408486031215610d0e57600080fd5b83359250602084013567ffffffffffffffff811115610d2c57600080fd5b610d3886828701610be6565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d8357600080fd5b8135610d8e81610c32565b9392505050565b600060208284031215610da757600080fd5b8151610d8e81610c32565b600060208284031215610dc457600080fd5b81518015158114610d8e57600080fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610dfd57610dfd610dd4565b92915050565b80820180821115610dfd57610dfd610dd4565b600060208284031215610e2857600080fd5b5051919050565b600060018201610e4157610e41610dd4565b506001019056fea26469706673582212207714b3271da3c6349c0cba8faffcb2f1ce84d1761bf7262a189a96b147bddd3764736f6c63430008110033",
  "devdoc": {
    "details": "Enables swapping through path: TokenA -> TokenB -> TokenC",
    "kind": "dev",
    "methods": {
      "getAmountsOut(uint256,address[])": {
        "params": {
          "amountIn": "Input amount",
          "path": "Array of token addresses"
        },
        "returns": {
          "amounts": "Array of output amounts for each step"
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "params": {
          "amountIn": "Input amount",
          "minAmountOut": "Minimum output amount (slippage protection)",
          "path": "Array of token addresses (e.g., [TokenA, TokenB, TokenC])",
          "to": "Recipient address"
        },
        "returns": {
          "amounts": "Array of amounts for each swap in the path"
        }
      }
    },
    "title": "DEXRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountsOut(uint256,address[])": {
        "notice": "Get amounts out for a given input through a path"
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "notice": "Swap exact tokens for tokens through a specified path"
      }
    },
    "notice": "Router contract for multi-hop swaps through multiple pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}