{
  "address": "0x74dea72D2A741a7E78c7D672d671679E337b6704",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract DEXFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x106a2df6d11e4ba1f3ccadc51d66f7b51a584c22174f1a20a4d6274938ec7e0f",
  "receipt": {
    "to": null,
    "from": "0xAA4ADd68289429Ace79b8c8219E733a6667A5F5c",
    "contractAddress": "0x74dea72D2A741a7E78c7D672d671679E337b6704",
    "transactionIndex": 1,
    "gasUsed": "838771",
    "logsBloom": "0x
    "blockHash": "0x5f5dbb8f016271a653e53a8aac19f0bcfce14f99db36d7285f35d1739e2b0506",
    "transactionHash": "0x106a2df6d11e4ba1f3ccadc51d66f7b51a584c22174f1a20a4d6274938ec7e0f",
    "logs": [],
    "blockNumber": 27989775,
    "cumulativeGasUsed": "884879",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x427655DBaB6e3CDE3C460bC34B7E30a0cF31016B"
  ],
  "numDeployments": 2,
  "solcInputHash": "4d8e19626fbd3e64aa4bee334fa8e1b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract DEXFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enables swapping through path: TokenA -> TokenB -> TokenC\",\"kind\":\"dev\",\"methods\":{\"getAmountsOut(uint256,address[])\":{\"params\":{\"amountIn\":\"Input amount\",\"path\":\"Array of token addresses\"},\"returns\":{\"amounts\":\"Array of output amounts for each step\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountIn\":\"Input amount\",\"minAmountOut\":\"Minimum output amount (slippage protection)\",\"path\":\"Array of token addresses (e.g., [TokenA, TokenB, TokenC])\",\"to\":\"Recipient address\"},\"returns\":{\"amounts\":\"Array of amounts for each swap in the path\"}}},\"title\":\"DEXRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountsOut(uint256,address[])\":{\"notice\":\"Get amounts out for a given input through a path\"},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swap exact tokens for tokens through a specified path\"}},\"notice\":\"Router contract for multi-hop swaps through multiple pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXRouter.sol\":\"DEXRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/DEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SimpleDEX.sol\\\";\\n\\n/**\\n * @title DEXFactory\\n * @notice Factory contract to create and manage multiple DEX pairs\\n * @dev Inspired by Uniswap V2 Factory pattern\\n */\\ncontract DEXFactory {\\n    // Mapping to track all created pairs: token0 => token1 => pair address\\n    mapping(address => mapping(address => address)) public getPair;\\n\\n    // Array of all pairs created\\n    address[] public allPairs;\\n\\n    // Events\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256 pairCount\\n    );\\n\\n    /**\\n     * @notice Create a new DEX pair for two tokens\\n     * @param tokenA Address of first token\\n     * @param tokenB Address of second token\\n     * @return pair Address of the created DEX pair\\n     */\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"DEXFactory: IDENTICAL_ADDRESSES\\\");\\n\\n        // Sort tokens to ensure consistent pair addressing\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n\\n        require(token0 != address(0), \\\"DEXFactory: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"DEXFactory: PAIR_EXISTS\\\");\\n\\n        // Deploy new SimpleDEX contract\\n        SimpleDEX dex = new SimpleDEX(token0, token1);\\n        pair = address(dex);\\n\\n        // Populate mapping in both directions\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /**\\n     * @notice Get total number of pairs created\\n     * @return Total pair count\\n     */\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n}\\n\",\"keccak256\":\"0x6487862cb39ddc8684ebdda78c65200905de0d3ee492cc264ef4ceaa140b17ef\",\"license\":\"MIT\"},\"contracts/DEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DEXFactory.sol\\\";\\nimport \\\"./SimpleDEX.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title DEXRouter\\n * @notice Router contract for multi-hop swaps through multiple pairs\\n * @dev Enables swapping through path: TokenA -> TokenB -> TokenC\\n */\\ncontract DEXRouter {\\n    DEXFactory public immutable factory;\\n\\n    constructor(address _factory) {\\n        require(_factory != address(0), \\\"Invalid factory address\\\");\\n        factory = DEXFactory(_factory);\\n    }\\n\\n    /**\\n     * @notice Swap exact tokens for tokens through a specified path\\n     * @param amountIn Input amount\\n     * @param minAmountOut Minimum output amount (slippage protection)\\n     * @param path Array of token addresses (e.g., [TokenA, TokenB, TokenC])\\n     * @param to Recipient address\\n     * @return amounts Array of amounts for each swap in the path\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] calldata path,\\n        address to\\n    ) external returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"DEXRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n\\n        // Execute swaps along the path\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address pair = factory.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), \\\"DEXRouter: PAIR_NOT_EXISTS\\\");\\n\\n            SimpleDEX dex = SimpleDEX(pair);\\n\\n            // Get swap amount\\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\\n\\n            // For first swap, transfer from msg.sender\\n            // For subsequent swaps, approve the DEX to spend from this router\\n            if (i == 0) {\\n                // Transfer tokens from user to router, then approve DEX\\n                IERC20(path[i]).transferFrom(msg.sender, address(this), amounts[i]);\\n                IERC20(path[i]).approve(pair, amounts[i]);\\n            } else {\\n                // Approve DEX to spend the tokens this router received from previous swap\\n                IERC20(path[i]).approve(pair, amounts[i]);\\n            }\\n\\n            // Execute swap - DEX will transfer tokens to msg.sender (which is this router)\\n            dex.swap(path[i], amounts[i]);\\n        }\\n\\n        // Transfer final tokens to recipient\\n        IERC20(path[path.length - 1]).transfer(to, amounts[amounts.length - 1]);\\n\\n        // Check final output meets minimum\\n        require(\\n            amounts[amounts.length - 1] >= minAmountOut,\\n            \\\"DEXRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Get amounts out for a given input through a path\\n     * @param amountIn Input amount\\n     * @param path Array of token addresses\\n     * @return amounts Array of output amounts for each step\\n     */\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path.length >= 2, \\\"DEXRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            address pair = factory.getPair(path[i], path[i + 1]);\\n            require(pair != address(0), \\\"DEXRouter: PAIR_NOT_EXISTS\\\");\\n\\n            SimpleDEX dex = SimpleDEX(pair);\\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79a62fdc3290521a195de228c5e63bd48754f6b56c7d130808beae2d156fbd25\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleDEX\\n * @notice A simplified decentralized exchange using constant product AMM (x * y = k)\\n * @dev Supports a single token pair with add/remove liquidity and swap functions\\n */\\ncontract SimpleDEX is ReentrancyGuard {\\n    // Token addresses\\n    IERC20 public immutable tokenA;\\n    IERC20 public immutable tokenB;\\n\\n    // Pool reserves\\n    uint256 public reserveA;\\n    uint256 public reserveB;\\n\\n    // Liquidity tracking\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    // Fee (0.3% = 3/1000)\\n    uint256 public constant FEE_NUMERATOR = 3;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    // Events\\n    event LiquidityAdded(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityMinted\\n    );\\n    event LiquidityRemoved(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityBurned\\n    );\\n    event Swap(\\n        address indexed user,\\n        address indexed tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @notice Constructor sets the token pair\\n     * @param _tokenA Address of first token\\n     * @param _tokenB Address of second token\\n     */\\n    constructor(address _tokenA, address _tokenB) {\\n        require(_tokenA != address(0) && _tokenB != address(0), \\\"Invalid token address\\\");\\n        require(_tokenA != _tokenB, \\\"Tokens must be different\\\");\\n\\n        tokenA = IERC20(_tokenA);\\n        tokenB = IERC20(_tokenB);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param amountA Amount of token A to add\\n     * @param amountB Amount of token B to add\\n     * @return liquidityMinted Amount of liquidity shares minted\\n     */\\n    function addLiquidity(uint256 amountA, uint256 amountB)\\n        external\\n        nonReentrant\\n        returns (uint256 liquidityMinted)\\n    {\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n        // Transfer tokens from user to contract\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\n\\n        // Calculate liquidity to mint\\n        if (totalLiquidity == 0) {\\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\\n            // We use a simple formula: liquidity = amountA (for simplicity)\\n            liquidityMinted = amountA;\\n        } else {\\n            // Subsequent liquidity: maintain pool ratio\\n            // liquidityMinted = (amountA / reserveA) * totalLiquidity\\n            // We take the minimum to prevent manipulation\\n            uint256 liquidityA = (amountA * totalLiquidity) / reserveA;\\n            uint256 liquidityB = (amountB * totalLiquidity) / reserveB;\\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\\n        }\\n\\n        require(liquidityMinted > 0, \\\"Insufficient liquidity minted\\\");\\n\\n        // Update state\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n        reserveA += amountA;\\n        reserveB += amountB;\\n\\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool\\n     * @param liquidityAmount Amount of liquidity shares to burn\\n     * @return amountA Amount of token A returned\\n     * @return amountB Amount of token B returned\\n     */\\n    function removeLiquidity(uint256 liquidityAmount)\\n        external\\n        nonReentrant\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        require(liquidityAmount > 0, \\\"Amount must be greater than 0\\\");\\n        require(liquidity[msg.sender] >= liquidityAmount, \\\"Insufficient liquidity\\\");\\n\\n        // Calculate amounts to return (proportional to share)\\n        amountA = (liquidityAmount * reserveA) / totalLiquidity;\\n        amountB = (liquidityAmount * reserveB) / totalLiquidity;\\n\\n        require(amountA > 0 && amountB > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Update state\\n        liquidity[msg.sender] -= liquidityAmount;\\n        totalLiquidity -= liquidityAmount;\\n        reserveA -= amountA;\\n        reserveB -= amountB;\\n\\n        // Transfer tokens back to user\\n        tokenA.transfer(msg.sender, amountA);\\n        tokenB.transfer(msg.sender, amountB);\\n\\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\\n    }\\n\\n    /**\\n     * @notice Swap one token for another\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @return amountOut Amount of token received\\n     */\\n    function swap(address tokenIn, uint256 amountIn)\\n        external\\n        nonReentrant\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        // Determine input/output tokens and reserves\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        // Transfer input token from user\\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\\n\\n        // Calculate output amount with fee\\n        // Formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\\n        // With 0.3% fee: amountIn = amountIn * (1 - 0.003) = amountIn * 997/1000\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n\\n        require(amountOut > 0, \\\"Insufficient output amount\\\");\\n        require(amountOut < reserveOut, \\\"Insufficient liquidity\\\");\\n\\n        // Update reserves\\n        if (isTokenA) {\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n\\n        // Transfer output token to user\\n        tokenOutContract.transfer(msg.sender, amountOut);\\n\\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut);\\n    }\\n\\n    /**\\n     * @notice Calculate swap output amount (view function)\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @return amountOut Estimated amount of token to receive\\n     */\\n    function getSwapAmount(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        // Determine reserves\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        // Calculate output with fee\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Get current pool state\\n     * @return _reserveA Reserve of token A\\n     * @return _reserveB Reserve of token B\\n     * @return _totalLiquidity Total liquidity shares\\n     */\\n    function getReserves()\\n        external\\n        view\\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\\n    {\\n        return (reserveA, reserveB, totalLiquidity);\\n    }\\n\\n    /**\\n     * @notice Get user's liquidity position\\n     * @param user Address to check\\n     * @return liquidityAmount User's liquidity shares\\n     * @return sharePercentage User's percentage of pool (in basis points, e.g., 1000 = 10%)\\n     */\\n    function getUserLiquidity(address user)\\n        external\\n        view\\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\\n    {\\n        liquidityAmount = liquidity[user];\\n        sharePercentage = totalLiquidity > 0\\n            ? (liquidityAmount * 10000) / totalLiquidity\\n            : 0;\\n    }\\n}\",\"keccak256\":\"0xd3982eb7b6dc48176b78e44215c0cbe6101662ef5d1ae58b0d162a01965121cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f1a380380610f1a83398101604081905261002f9161009a565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420666163746f72792061646472657373000000000000000000604482015260640160405180910390fd5b6001600160a01b03166080526100ca565b6000602082840312156100ac57600080fd5b81516001600160a01b03811681146100c357600080fd5b9392505050565b608051610e286100f260003960008181607401528181610191015261093c0152610e286000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610bf4565b6100c1565b6040516100669190610c5f565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610ca3565b610871565b606060028310156101135760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b60448201526064015b60405180910390fd5b8267ffffffffffffffff81111561012c5761012c610cef565b604051908082528060200260200182016040528015610155578160200160208202803683370190505b509050858160008151811061016c5761016c610d05565b60200260200101818152505060005b610186600185610d31565b8110156107075760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058787858181106101d0576101d0610d05565b90506020020160208101906101e59190610d4a565b88886101f2876001610d6e565b81811061020157610201610d05565b90506020020160208101906102169190610d4a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102859190610d81565b90506001600160a01b0381166102dd5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db8888868181106102ff576102ff610d05565b90506020020160208101906103149190610d4a565b86868151811061032657610326610d05565b60200260200101516040518363ffffffff1660e01b815260040161035f9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa15801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a09190610d9e565b846103ac856001610d6e565b815181106103bc576103bc610d05565b60200260200101818152505082600003610567578686848181106103e2576103e2610d05565b90506020020160208101906103f79190610d4a565b6001600160a01b03166323b872dd333087878151811061041957610419610d05565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610db7565b508686848181106104af576104af610d05565b90506020020160208101906104c49190610d4a565b6001600160a01b031663095ea7b3838686815181106104e5576104e5610d05565b60200260200101516040518363ffffffff1660e01b815260040161051e9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561053d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105619190610db7565b5061062d565b86868481811061057957610579610d05565b905060200201602081019061058e9190610d4a565b6001600160a01b031663095ea7b3838686815181106105af576105af610d05565b60200260200101516040518363ffffffff1660e01b81526004016105e89291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610db7565b505b806001600160a01b031663d004f0f788888681811061064e5761064e610d05565b90506020020160208101906106639190610d4a565b86868151811061067557610675610d05565b60200260200101516040518363ffffffff1660e01b81526004016106ae9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190610d9e565b50505080806106ff90610dd9565b91505061017b565b508383610715600182610d31565b81811061072457610724610d05565b90506020020160208101906107399190610d4a565b6001600160a01b031663a9059cbb8383600185516107579190610d31565b8151811061076757610767610d05565b60200260200101516040518363ffffffff1660e01b81526004016107a09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190610db7565b508481600183516107f49190610d31565b8151811061080457610804610d05565b602002602001015110156108685760405162461bcd60e51b815260206004820152602560248201527f444558526f757465723a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161010a565b95945050505050565b606060028210156108be5760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b604482015260640161010a565b8167ffffffffffffffff8111156108d7576108d7610cef565b604051908082528060200260200182016040528015610900578160200160208202803683370190505b509050838160008151811061091757610917610d05565b60200260200101818152505060005b610931600184610d31565b811015610b885760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586868581811061097b5761097b610d05565b90506020020160208101906109909190610d4a565b878761099d876001610d6e565b8181106109ac576109ac610d05565b90506020020160208101906109c19190610d4a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190610d81565b90506001600160a01b038116610a885760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db878786818110610aaa57610aaa610d05565b9050602002016020810190610abf9190610d4a565b868681518110610ad157610ad1610d05565b60200260200101516040518363ffffffff1660e01b8152600401610b0a9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610d9e565b84610b57856001610d6e565b81518110610b6757610b67610d05565b60200260200101818152505050508080610b8090610dd9565b915050610926565b509392505050565b60008083601f840112610ba257600080fd5b50813567ffffffffffffffff811115610bba57600080fd5b6020830191508360208260051b8501011115610bd557600080fd5b9250929050565b6001600160a01b0381168114610bf157600080fd5b50565b600080600080600060808688031215610c0c57600080fd5b8535945060208601359350604086013567ffffffffffffffff811115610c3157600080fd5b610c3d88828901610b90565b9094509250506060860135610c5181610bdc565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610c9757835183529284019291840191600101610c7b565b50909695505050505050565b600080600060408486031215610cb857600080fd5b83359250602084013567ffffffffffffffff811115610cd657600080fd5b610ce286828701610b90565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d4457610d44610d1b565b92915050565b600060208284031215610d5c57600080fd5b8135610d6781610bdc565b9392505050565b80820180821115610d4457610d44610d1b565b600060208284031215610d9357600080fd5b8151610d6781610bdc565b600060208284031215610db057600080fd5b5051919050565b600060208284031215610dc957600080fd5b81518015158114610d6757600080fd5b600060018201610deb57610deb610d1b565b506001019056fea26469706673582212206a36c1a5d9cf2921c62bdac4f92ec50e43d9ffeae14fab77f1beb2e35fb5547a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063472b43f314610046578063c45a01551461006f578063d06ca61f146100ae575b600080fd5b610059610054366004610bf4565b6100c1565b6040516100669190610c5f565b60405180910390f35b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610066565b6100596100bc366004610ca3565b610871565b606060028310156101135760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b60448201526064015b60405180910390fd5b8267ffffffffffffffff81111561012c5761012c610cef565b604051908082528060200260200182016040528015610155578160200160208202803683370190505b509050858160008151811061016c5761016c610d05565b60200260200101818152505060005b610186600185610d31565b8110156107075760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058787858181106101d0576101d0610d05565b90506020020160208101906101e59190610d4a565b88886101f2876001610d6e565b81811061020157610201610d05565b90506020020160208101906102169190610d4a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102859190610d81565b90506001600160a01b0381166102dd5760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db8888868181106102ff576102ff610d05565b90506020020160208101906103149190610d4a565b86868151811061032657610326610d05565b60200260200101516040518363ffffffff1660e01b815260040161035f9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa15801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a09190610d9e565b846103ac856001610d6e565b815181106103bc576103bc610d05565b60200260200101818152505082600003610567578686848181106103e2576103e2610d05565b90506020020160208101906103f79190610d4a565b6001600160a01b03166323b872dd333087878151811061041957610419610d05565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c9190610db7565b508686848181106104af576104af610d05565b90506020020160208101906104c49190610d4a565b6001600160a01b031663095ea7b3838686815181106104e5576104e5610d05565b60200260200101516040518363ffffffff1660e01b815260040161051e9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561053d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105619190610db7565b5061062d565b86868481811061057957610579610d05565b905060200201602081019061058e9190610d4a565b6001600160a01b031663095ea7b3838686815181106105af576105af610d05565b60200260200101516040518363ffffffff1660e01b81526004016105e89291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610db7565b505b806001600160a01b031663d004f0f788888681811061064e5761064e610d05565b90506020020160208101906106639190610d4a565b86868151811061067557610675610d05565b60200260200101516040518363ffffffff1660e01b81526004016106ae9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190610d9e565b50505080806106ff90610dd9565b91505061017b565b508383610715600182610d31565b81811061072457610724610d05565b90506020020160208101906107399190610d4a565b6001600160a01b031663a9059cbb8383600185516107579190610d31565b8151811061076757610767610d05565b60200260200101516040518363ffffffff1660e01b81526004016107a09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190610db7565b508481600183516107f49190610d31565b8151811061080457610804610d05565b602002602001015110156108685760405162461bcd60e51b815260206004820152602560248201527f444558526f757465723a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b606482015260840161010a565b95945050505050565b606060028210156108be5760405162461bcd60e51b81526020600482015260176024820152760888ab0a4deeae8cae47440929cac82989288bea082a89604b1b604482015260640161010a565b8167ffffffffffffffff8111156108d7576108d7610cef565b604051908082528060200260200182016040528015610900578160200160208202803683370190505b509050838160008151811061091757610917610d05565b60200260200101818152505060005b610931600184610d31565b811015610b885760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586868581811061097b5761097b610d05565b90506020020160208101906109909190610d4a565b878761099d876001610d6e565b8181106109ac576109ac610d05565b90506020020160208101906109c19190610d4a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190610d81565b90506001600160a01b038116610a885760405162461bcd60e51b815260206004820152601a60248201527f444558526f757465723a20504149525f4e4f545f455849535453000000000000604482015260640161010a565b806001600160a01b038116631befa6db878786818110610aaa57610aaa610d05565b9050602002016020810190610abf9190610d4a565b868681518110610ad157610ad1610d05565b60200260200101516040518363ffffffff1660e01b8152600401610b0a9291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610d9e565b84610b57856001610d6e565b81518110610b6757610b67610d05565b60200260200101818152505050508080610b8090610dd9565b915050610926565b509392505050565b60008083601f840112610ba257600080fd5b50813567ffffffffffffffff811115610bba57600080fd5b6020830191508360208260051b8501011115610bd557600080fd5b9250929050565b6001600160a01b0381168114610bf157600080fd5b50565b600080600080600060808688031215610c0c57600080fd5b8535945060208601359350604086013567ffffffffffffffff811115610c3157600080fd5b610c3d88828901610b90565b9094509250506060860135610c5181610bdc565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610c9757835183529284019291840191600101610c7b565b50909695505050505050565b600080600060408486031215610cb857600080fd5b83359250602084013567ffffffffffffffff811115610cd657600080fd5b610ce286828701610b90565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d4457610d44610d1b565b92915050565b600060208284031215610d5c57600080fd5b8135610d6781610bdc565b9392505050565b80820180821115610d4457610d44610d1b565b600060208284031215610d9357600080fd5b8151610d6781610bdc565b600060208284031215610db057600080fd5b5051919050565b600060208284031215610dc957600080fd5b81518015158114610d6757600080fd5b600060018201610deb57610deb610d1b565b506001019056fea26469706673582212206a36c1a5d9cf2921c62bdac4f92ec50e43d9ffeae14fab77f1beb2e35fb5547a64736f6c63430008110033",
  "devdoc": {
    "details": "Enables swapping through path: TokenA -> TokenB -> TokenC",
    "kind": "dev",
    "methods": {
      "getAmountsOut(uint256,address[])": {
        "params": {
          "amountIn": "Input amount",
          "path": "Array of token addresses"
        },
        "returns": {
          "amounts": "Array of output amounts for each step"
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "params": {
          "amountIn": "Input amount",
          "minAmountOut": "Minimum output amount (slippage protection)",
          "path": "Array of token addresses (e.g., [TokenA, TokenB, TokenC])",
          "to": "Recipient address"
        },
        "returns": {
          "amounts": "Array of amounts for each swap in the path"
        }
      }
    },
    "title": "DEXRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountsOut(uint256,address[])": {
        "notice": "Get amounts out for a given input through a path"
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address)": {
        "notice": "Swap exact tokens for tokens through a specified path"
      }
    },
    "notice": "Router contract for multi-hop swaps through multiple pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}