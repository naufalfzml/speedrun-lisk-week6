{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DEXFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./SimpleDEXV2.sol\";\n\n/**\n * @title DEXFactory\n * @notice Factory contract to create and manage multiple DEX pairs\n * @dev Inspired by Uniswap V2 Factory pattern\n */\ncontract DEXFactory {\n    // Mapping to track all created pairs: token0 => token1 => pair address\n    mapping(address => mapping(address => address)) public getPair;\n\n    // Array of all pairs created\n    address[] public allPairs;\n\n    // Events\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256 pairCount\n    );\n\n    /**\n     * @notice Create a new DEX pair for two tokens\n     * @param tokenA Address of first token\n     * @param tokenB Address of second token\n     * @return pair Address of the created DEX pair\n     */\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair)\n    {\n        require(tokenA != tokenB, \"DEXFactory: IDENTICAL_ADDRESSES\");\n\n        // Sort tokens to ensure consistent pair addressing\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n\n        require(token0 != address(0), \"DEXFactory: ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"DEXFactory: PAIR_EXISTS\");\n\n        // Deploy new SimpleDEXV2 contract\n        SimpleDEXV2 dex = new SimpleDEXV2(token0, token1);\n        pair = address(dex);\n\n        // Populate mapping in both directions\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    /**\n     * @notice Get total number of pairs created\n     * @return Total pair count\n     */\n    function allPairsLength() external view returns (uint256) {\n        return allPairs.length;\n    }\n}\n"
    },
    "contracts/DEXGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title DEXGovernance\n * @notice Governance token for DEX parameter voting\n * @dev Simple governance for fee changes\n */\ncontract DEXGovernance is ERC20, Ownable {\n    // Proposal structure\n    struct Proposal {\n        uint256 id;\n        string description;\n        uint256 newFeeNumerator; // New fee to set (e.g., 3 for 0.3%)\n        uint256 votesFor;\n        uint256 votesAgainst;\n        uint256 deadline;\n        bool executed;\n        mapping(address => bool) hasVoted;\n    }\n\n    // Proposals\n    uint256 public proposalCount;\n    mapping(uint256 => Proposal) public proposals;\n\n    // Voting parameters\n    uint256 public constant VOTING_PERIOD = 3 days;\n    uint256 public constant PROPOSAL_THRESHOLD = 1000 * 10**18; // Need 1000 tokens to propose\n\n    // Events\n    event ProposalCreated(\n        uint256 indexed proposalId,\n        address indexed proposer,\n        string description,\n        uint256 newFeeNumerator\n    );\n    event Voted(\n        uint256 indexed proposalId,\n        address indexed voter,\n        bool support,\n        uint256 votes\n    );\n    event ProposalExecuted(uint256 indexed proposalId, bool passed);\n\n    constructor() ERC20(\"DEX Governance Token\", \"DEXG\") {\n        // Mint initial supply to deployer\n        _mint(msg.sender, 1_000_000 * 10**18); // 1M tokens\n    }\n\n    /**\n     * @notice Create a new fee change proposal\n     * @param description Proposal description\n     * @param newFeeNumerator New fee numerator (e.g., 3 for 0.3%)\n     */\n    function propose(string memory description, uint256 newFeeNumerator)\n        external\n        returns (uint256)\n    {\n        require(\n            balanceOf(msg.sender) >= PROPOSAL_THRESHOLD,\n            \"Insufficient tokens to propose\"\n        );\n        require(newFeeNumerator <= 30, \"Fee too high\"); // Max 3%\n\n        proposalCount++;\n        Proposal storage newProposal = proposals[proposalCount];\n        newProposal.id = proposalCount;\n        newProposal.description = description;\n        newProposal.newFeeNumerator = newFeeNumerator;\n        newProposal.deadline = block.timestamp + VOTING_PERIOD;\n        newProposal.executed = false;\n\n        emit ProposalCreated(\n            proposalCount,\n            msg.sender,\n            description,\n            newFeeNumerator\n        );\n\n        return proposalCount;\n    }\n\n    /**\n     * @notice Vote on a proposal\n     * @param proposalId ID of proposal\n     * @param support True for yes, false for no\n     */\n    function vote(uint256 proposalId, bool support) external {\n        Proposal storage proposal = proposals[proposalId];\n        require(block.timestamp < proposal.deadline, \"Voting ended\");\n        require(!proposal.hasVoted[msg.sender], \"Already voted\");\n\n        uint256 votes = balanceOf(msg.sender);\n        require(votes > 0, \"No voting power\");\n\n        proposal.hasVoted[msg.sender] = true;\n\n        if (support) {\n            proposal.votesFor += votes;\n        } else {\n            proposal.votesAgainst += votes;\n        }\n\n        emit Voted(proposalId, msg.sender, support, votes);\n    }\n\n    /**\n     * @notice Execute a proposal if it passed\n     * @param proposalId ID of proposal to execute\n     */\n    function executeProposal(uint256 proposalId) external onlyOwner {\n        Proposal storage proposal = proposals[proposalId];\n        require(block.timestamp >= proposal.deadline, \"Voting not ended\");\n        require(!proposal.executed, \"Already executed\");\n\n        bool passed = proposal.votesFor > proposal.votesAgainst;\n        proposal.executed = true;\n\n        emit ProposalExecuted(proposalId, passed);\n\n        // Note: Actual fee change would be implemented in DEX contract\n        // This is just the governance token\n    }\n\n    /**\n     * @notice Get proposal details\n     */\n    function getProposal(uint256 proposalId)\n        external\n        view\n        returns (\n            uint256 id,\n            string memory description,\n            uint256 newFeeNumerator,\n            uint256 votesFor,\n            uint256 votesAgainst,\n            uint256 deadline,\n            bool executed\n        )\n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (\n            proposal.id,\n            proposal.description,\n            proposal.newFeeNumerator,\n            proposal.votesFor,\n            proposal.votesAgainst,\n            proposal.deadline,\n            proposal.executed\n        );\n    }\n\n    /**\n     * @notice Check if user has voted on proposal\n     */\n    function hasVoted(uint256 proposalId, address voter)\n        external\n        view\n        returns (bool)\n    {\n        return proposals[proposalId].hasVoted[voter];\n    }\n}\n"
    },
    "contracts/DEXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DEXFactory.sol\";\nimport \"./SimpleDEXV2.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title DEXRouter\n * @notice Router contract for multi-hop swaps through multiple pairs\n * @dev Enables swapping through path: TokenA -> TokenB -> TokenC\n */\ncontract DEXRouter {\n    DEXFactory public immutable factory;\n\n    constructor(address _factory) {\n        require(_factory != address(0), \"Invalid factory address\");\n        factory = DEXFactory(_factory);\n    }\n\n    /**\n     * @notice Swap exact tokens for tokens through a specified path\n     * @param amountIn Input amount\n     * @param minAmountOut Minimum output amount (slippage protection)\n     * @param path Array of token addresses (e.g., [TokenA, TokenB, TokenC])\n     * @param to Recipient address\n     * @return amounts Array of amounts for each swap in the path\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 minAmountOut,\n        address[] calldata path,\n        address to\n    ) external returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"DEXRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n\n        // Transfer initial tokens from sender to first pair\n        IERC20(path[0]).transferFrom(\n            msg.sender,\n            factory.getPair(path[0], path[1]),\n            amountIn\n        );\n\n        // Execute swaps along the path\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address pair = factory.getPair(path[i], path[i + 1]);\n            require(pair != address(0), \"DEXRouter: PAIR_NOT_EXISTS\");\n\n            SimpleDEXV2 dex = SimpleDEXV2(pair);\n\n            // Get swap amount\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\n\n            // Determine recipient (next pair or final recipient)\n            address recipient = i < path.length - 2\n                ? factory.getPair(path[i + 1], path[i + 2])\n                : to;\n\n            // Execute swap\n            dex.swap(path[i], amounts[i], 0); // minAmountOut checked at the end\n\n            // Transfer output to recipient\n            IERC20(path[i + 1]).transfer(recipient, amounts[i + 1]);\n        }\n\n        // Check final output meets minimum\n        require(\n            amounts[amounts.length - 1] >= minAmountOut,\n            \"DEXRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    /**\n     * @notice Get amounts out for a given input through a path\n     * @param amountIn Input amount\n     * @param path Array of token addresses\n     * @return amounts Array of output amounts for each step\n     */\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"DEXRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address pair = factory.getPair(path[i], path[i + 1]);\n            require(pair != address(0), \"DEXRouter: PAIR_NOT_EXISTS\");\n\n            SimpleDEXV2 dex = SimpleDEXV2(pair);\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\n        }\n    }\n}\n"
    },
    "contracts/SimpleDEXV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title SimpleDEXV2\n * @notice Advanced DEX with ERC20 LP tokens, fee distribution, TWAP, and slippage protection\n * @dev Upgraded version with all advanced features\n */\ncontract SimpleDEXV2 is ERC20, ReentrancyGuard {\n    // Token addresses\n    IERC20 public immutable tokenA;\n    IERC20 public immutable tokenB;\n\n    // Pool reserves\n    uint256 public reserveA;\n    uint256 public reserveB;\n\n    // Fee tracking (0.3% = 3/1000)\n    uint256 public constant FEE_NUMERATOR = 3;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n\n    // Accumulated fees for LP providers\n    uint256 public accumulatedFeesA;\n    uint256 public accumulatedFeesB;\n\n    // TWAP: Time-Weighted Average Price Oracle\n    struct Observation {\n        uint256 timestamp;\n        uint256 priceACumulative;\n        uint256 priceBCumulative;\n    }\n    Observation[] public observations;\n    uint256 private constant OBSERVATION_WINDOW = 24 hours;\n\n    // Last price update timestamp\n    uint256 public lastPriceUpdate;\n\n    // Events\n    event LiquidityAdded(\n        address indexed provider,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidityMinted\n    );\n    event LiquidityRemoved(\n        address indexed provider,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidityBurned\n    );\n    event Swap(\n        address indexed user,\n        address indexed tokenIn,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 priceImpact\n    );\n    event FeesClaimed(\n        address indexed provider,\n        uint256 feeA,\n        uint256 feeB\n    );\n\n    /**\n     * @notice Constructor sets the token pair and creates LP token\n     * @param _tokenA Address of first token\n     * @param _tokenB Address of second token\n     */\n    constructor(address _tokenA, address _tokenB)\n        ERC20(\"SimpleDEX LP\", \"SLP-LP\")\n    {\n        require(_tokenA != address(0) && _tokenB != address(0), \"Invalid token address\");\n        require(_tokenA != _tokenB, \"Tokens must be different\");\n\n        tokenA = IERC20(_tokenA);\n        tokenB = IERC20(_tokenB);\n        lastPriceUpdate = block.timestamp;\n    }\n\n    /**\n     * @notice Add liquidity to the pool\n     * @param amountA Amount of token A to add\n     * @param amountB Amount of token B to add\n     * @return liquidityMinted Amount of LP tokens minted\n     */\n    function addLiquidity(uint256 amountA, uint256 amountB)\n        external\n        nonReentrant\n        returns (uint256 liquidityMinted)\n    {\n        require(amountA > 0 && amountB > 0, \"Amounts must be greater than 0\");\n\n        // Update TWAP before changing reserves\n        _updatePrice();\n\n        // Transfer tokens from user to contract\n        tokenA.transferFrom(msg.sender, address(this), amountA);\n        tokenB.transferFrom(msg.sender, address(this), amountB);\n\n        // Calculate liquidity to mint\n        uint256 _totalSupply = totalSupply();\n        if (_totalSupply == 0) {\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\n            liquidityMinted = _sqrt(amountA * amountB);\n        } else {\n            // Subsequent liquidity: maintain pool ratio\n            uint256 liquidityA = (amountA * _totalSupply) / reserveA;\n            uint256 liquidityB = (amountB * _totalSupply) / reserveB;\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\n        }\n\n        require(liquidityMinted > 0, \"Insufficient liquidity minted\");\n\n        // Mint LP tokens to user\n        _mint(msg.sender, liquidityMinted);\n\n        // Update reserves\n        reserveA += amountA;\n        reserveB += amountB;\n\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool\n     * @param liquidityAmount Amount of LP tokens to burn\n     * @return amountA Amount of token A returned\n     * @return amountB Amount of token B returned\n     */\n    function removeLiquidity(uint256 liquidityAmount)\n        external\n        nonReentrant\n        returns (uint256 amountA, uint256 amountB)\n    {\n        require(liquidityAmount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(msg.sender) >= liquidityAmount, \"Insufficient liquidity\");\n\n        // Update TWAP before changing reserves\n        _updatePrice();\n\n        uint256 _totalSupply = totalSupply();\n\n        // Calculate amounts to return (proportional to share)\n        amountA = (liquidityAmount * reserveA) / _totalSupply;\n        amountB = (liquidityAmount * reserveB) / _totalSupply;\n\n        require(amountA > 0 && amountB > 0, \"Insufficient liquidity burned\");\n\n        // Burn LP tokens\n        _burn(msg.sender, liquidityAmount);\n\n        // Update reserves\n        reserveA -= amountA;\n        reserveB -= amountB;\n\n        // Transfer tokens back to user\n        tokenA.transfer(msg.sender, amountA);\n        tokenB.transfer(msg.sender, amountB);\n\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\n    }\n\n    /**\n     * @notice Swap one token for another with slippage protection\n     * @param tokenIn Address of token to swap in\n     * @param amountIn Amount of token to swap in\n     * @param minAmountOut Minimum output amount (slippage protection)\n     * @return amountOut Amount of token received\n     */\n    function swap(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 minAmountOut\n    ) external nonReentrant returns (uint256 amountOut) {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\n            \"Invalid token\"\n        );\n\n        // Update TWAP before swap\n        _updatePrice();\n\n        // Determine input/output tokens and reserves\n        bool isTokenA = tokenIn == address(tokenA);\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n\n        // Calculate price impact BEFORE swap\n        uint256 priceImpact = _calculatePriceImpact(amountIn, reserveIn, reserveOut);\n\n        // Transfer input token from user\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\n\n        // Calculate output amount with fee\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\n        amountOut = numerator / denominator;\n\n        require(amountOut > 0, \"Insufficient output amount\");\n        require(amountOut >= minAmountOut, \"Slippage exceeded\");\n        require(amountOut < reserveOut, \"Insufficient liquidity\");\n\n        // Calculate fee\n        uint256 feeAmount = (amountIn * FEE_NUMERATOR) / FEE_DENOMINATOR;\n\n        // Update accumulated fees\n        if (isTokenA) {\n            accumulatedFeesA += feeAmount;\n            reserveA += amountIn;\n            reserveB -= amountOut;\n        } else {\n            accumulatedFeesB += feeAmount;\n            reserveB += amountIn;\n            reserveA -= amountOut;\n        }\n\n        // Transfer output token to user\n        tokenOutContract.transfer(msg.sender, amountOut);\n\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut, priceImpact);\n    }\n\n    /**\n     * @notice Claim accumulated fees proportional to LP share\n     * @return feeA Amount of token A fees claimed\n     * @return feeB Amount of token B fees claimed\n     */\n    function claimFees() external nonReentrant returns (uint256 feeA, uint256 feeB) {\n        uint256 userBalance = balanceOf(msg.sender);\n        require(userBalance > 0, \"No liquidity\");\n\n        uint256 _totalSupply = totalSupply();\n\n        // Calculate user's share of fees\n        uint256 userShare = (userBalance * 10000) / _totalSupply;\n        feeA = (accumulatedFeesA * userShare) / 10000;\n        feeB = (accumulatedFeesB * userShare) / 10000;\n\n        require(feeA > 0 || feeB > 0, \"No fees to claim\");\n\n        // Transfer fees to user\n        if (feeA > 0) {\n            tokenA.transfer(msg.sender, feeA);\n        }\n        if (feeB > 0) {\n            tokenB.transfer(msg.sender, feeB);\n        }\n\n        emit FeesClaimed(msg.sender, feeA, feeB);\n    }\n\n    /**\n     * @notice Calculate swap output amount (view function)\n     * @param tokenIn Address of token to swap in\n     * @param amountIn Amount of token to swap in\n     * @return amountOut Estimated amount of token to receive\n     */\n    function getSwapAmount(address tokenIn, uint256 amountIn)\n        external\n        view\n        returns (uint256 amountOut)\n    {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\n            \"Invalid token\"\n        );\n\n        bool isTokenA = tokenIn == address(tokenA);\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @notice Get current pool state\n     */\n    function getReserves()\n        external\n        view\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\n    {\n        return (reserveA, reserveB, totalSupply());\n    }\n\n    /**\n     * @notice Get user's liquidity position\n     */\n    function getUserLiquidity(address user)\n        external\n        view\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\n    {\n        liquidityAmount = balanceOf(user);\n        uint256 _totalSupply = totalSupply();\n        sharePercentage = _totalSupply > 0\n            ? (liquidityAmount * 10000) / _totalSupply\n            : 0;\n    }\n\n    /**\n     * @notice Calculate price impact of a swap\n     * @param amountIn Input amount\n     * @param tokenIn Address of token to swap in\n     * @return priceImpact Price impact in basis points (e.g., 500 = 5%)\n     */\n    function calculatePriceImpact(\n        uint256 amountIn,\n        address tokenIn\n    ) external view returns (uint256 priceImpact) {\n        bool isTokenA = tokenIn == address(tokenA);\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n\n        return _calculatePriceImpact(amountIn, reserveIn, reserveOut);\n    }\n\n    /**\n     * @notice Internal function to calculate price impact\n     */\n    function _calculatePriceImpact(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256) {\n        // Price impact = ((outputAmount * reserveIn) / (inputAmount * reserveOut) - 1) * 100\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\n        uint256 outputAmount = numerator / denominator;\n\n        // Calculate price impact in basis points\n        uint256 idealOutput = (amountIn * reserveOut) / reserveIn;\n        if (idealOutput == 0) return 0;\n\n        uint256 impact = ((idealOutput - outputAmount) * 10000) / idealOutput;\n        return impact;\n    }\n\n    /**\n     * @notice Update TWAP price observations\n     */\n    function _updatePrice() internal {\n        uint256 timeElapsed = block.timestamp - lastPriceUpdate;\n\n        if (timeElapsed > 0 && reserveA > 0 && reserveB > 0) {\n            // Calculate cumulative prices\n            uint256 priceACumulative = (reserveB * 1e18) / reserveA;\n            uint256 priceBCumulative = (reserveA * 1e18) / reserveB;\n\n            // Add observation\n            observations.push(Observation({\n                timestamp: block.timestamp,\n                priceACumulative: priceACumulative,\n                priceBCumulative: priceBCumulative\n            }));\n\n            // Remove old observations (keep only last 24 hours)\n            _pruneOldObservations();\n\n            lastPriceUpdate = block.timestamp;\n        }\n    }\n\n    /**\n     * @notice Remove observations older than OBSERVATION_WINDOW\n     */\n    function _pruneOldObservations() internal {\n        uint256 cutoffTime = block.timestamp - OBSERVATION_WINDOW;\n        uint256 i = 0;\n\n        while (i < observations.length && observations[i].timestamp < cutoffTime) {\n            i++;\n        }\n\n        if (i > 0) {\n            for (uint256 j = 0; j < observations.length - i; j++) {\n                observations[j] = observations[j + i];\n            }\n            for (uint256 k = 0; k < i; k++) {\n                observations.pop();\n            }\n        }\n    }\n\n    /**\n     * @notice Get TWAP for a specific period\n     * @param period Time period in seconds\n     * @return twapPriceA Time-weighted average price of A in terms of B\n     * @return twapPriceB Time-weighted average price of B in terms of A\n     */\n    function getTWAP(uint256 period)\n        external\n        view\n        returns (uint256 twapPriceA, uint256 twapPriceB)\n    {\n        require(observations.length >= 2, \"Insufficient observations\");\n        require(period <= OBSERVATION_WINDOW, \"Period too long\");\n\n        uint256 targetTime = block.timestamp - period;\n\n        // Find oldest observation within period\n        uint256 oldestIndex = observations.length - 1;\n        for (uint256 i = 0; i < observations.length; i++) {\n            if (observations[i].timestamp >= targetTime) {\n                oldestIndex = i;\n                break;\n            }\n        }\n\n        Observation memory oldest = observations[oldestIndex];\n        Observation memory newest = observations[observations.length - 1];\n\n        uint256 timeElapsed = newest.timestamp - oldest.timestamp;\n        require(timeElapsed > 0, \"No time elapsed\");\n\n        twapPriceA = (newest.priceACumulative - oldest.priceACumulative) / timeElapsed;\n        twapPriceB = (newest.priceBCumulative - oldest.priceBCumulative) / timeElapsed;\n    }\n\n    /**\n     * @notice Square root function (Babylonian method)\n     */\n    function _sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        uint256 z = (x + 1) / 2;\n        uint256 y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n        return y;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}