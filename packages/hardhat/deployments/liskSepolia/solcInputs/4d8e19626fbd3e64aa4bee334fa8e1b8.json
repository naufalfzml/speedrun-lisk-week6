{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/DEXFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./SimpleDEX.sol\";\n\n/**\n * @title DEXFactory\n * @notice Factory contract to create and manage multiple DEX pairs\n * @dev Inspired by Uniswap V2 Factory pattern\n */\ncontract DEXFactory {\n    // Mapping to track all created pairs: token0 => token1 => pair address\n    mapping(address => mapping(address => address)) public getPair;\n\n    // Array of all pairs created\n    address[] public allPairs;\n\n    // Events\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256 pairCount\n    );\n\n    /**\n     * @notice Create a new DEX pair for two tokens\n     * @param tokenA Address of first token\n     * @param tokenB Address of second token\n     * @return pair Address of the created DEX pair\n     */\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair)\n    {\n        require(tokenA != tokenB, \"DEXFactory: IDENTICAL_ADDRESSES\");\n\n        // Sort tokens to ensure consistent pair addressing\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n\n        require(token0 != address(0), \"DEXFactory: ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"DEXFactory: PAIR_EXISTS\");\n\n        // Deploy new SimpleDEX contract\n        SimpleDEX dex = new SimpleDEX(token0, token1);\n        pair = address(dex);\n\n        // Populate mapping in both directions\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    /**\n     * @notice Get total number of pairs created\n     * @return Total pair count\n     */\n    function allPairsLength() external view returns (uint256) {\n        return allPairs.length;\n    }\n}\n"
    },
    "contracts/DEXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DEXFactory.sol\";\nimport \"./SimpleDEX.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title DEXRouter\n * @notice Router contract for multi-hop swaps through multiple pairs\n * @dev Enables swapping through path: TokenA -> TokenB -> TokenC\n */\ncontract DEXRouter {\n    DEXFactory public immutable factory;\n\n    constructor(address _factory) {\n        require(_factory != address(0), \"Invalid factory address\");\n        factory = DEXFactory(_factory);\n    }\n\n    /**\n     * @notice Swap exact tokens for tokens through a specified path\n     * @param amountIn Input amount\n     * @param minAmountOut Minimum output amount (slippage protection)\n     * @param path Array of token addresses (e.g., [TokenA, TokenB, TokenC])\n     * @param to Recipient address\n     * @return amounts Array of amounts for each swap in the path\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 minAmountOut,\n        address[] calldata path,\n        address to\n    ) external returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"DEXRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n\n        // Execute swaps along the path\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address pair = factory.getPair(path[i], path[i + 1]);\n            require(pair != address(0), \"DEXRouter: PAIR_NOT_EXISTS\");\n\n            SimpleDEX dex = SimpleDEX(pair);\n\n            // Get swap amount\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\n\n            // For first swap, transfer from msg.sender\n            // For subsequent swaps, approve the DEX to spend from this router\n            if (i == 0) {\n                // Transfer tokens from user to router, then approve DEX\n                IERC20(path[i]).transferFrom(msg.sender, address(this), amounts[i]);\n                IERC20(path[i]).approve(pair, amounts[i]);\n            } else {\n                // Approve DEX to spend the tokens this router received from previous swap\n                IERC20(path[i]).approve(pair, amounts[i]);\n            }\n\n            // Execute swap - DEX will transfer tokens to msg.sender (which is this router)\n            dex.swap(path[i], amounts[i]);\n        }\n\n        // Transfer final tokens to recipient\n        IERC20(path[path.length - 1]).transfer(to, amounts[amounts.length - 1]);\n\n        // Check final output meets minimum\n        require(\n            amounts[amounts.length - 1] >= minAmountOut,\n            \"DEXRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    /**\n     * @notice Get amounts out for a given input through a path\n     * @param amountIn Input amount\n     * @param path Array of token addresses\n     * @return amounts Array of output amounts for each step\n     */\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"DEXRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address pair = factory.getPair(path[i], path[i + 1]);\n            require(pair != address(0), \"DEXRouter: PAIR_NOT_EXISTS\");\n\n            SimpleDEX dex = SimpleDEX(pair);\n            amounts[i + 1] = dex.getSwapAmount(path[i], amounts[i]);\n        }\n    }\n}\n"
    },
    "contracts/SimpleDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title SimpleDEX\n * @notice A simplified decentralized exchange using constant product AMM (x * y = k)\n * @dev Supports a single token pair with add/remove liquidity and swap functions\n */\ncontract SimpleDEX is ReentrancyGuard {\n    // Token addresses\n    IERC20 public immutable tokenA;\n    IERC20 public immutable tokenB;\n\n    // Pool reserves\n    uint256 public reserveA;\n    uint256 public reserveB;\n\n    // Liquidity tracking\n    uint256 public totalLiquidity;\n    mapping(address => uint256) public liquidity;\n\n    // Fee (0.3% = 3/1000)\n    uint256 public constant FEE_NUMERATOR = 3;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n\n    // Events\n    event LiquidityAdded(\n        address indexed provider,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidityMinted\n    );\n    event LiquidityRemoved(\n        address indexed provider,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidityBurned\n    );\n    event Swap(\n        address indexed user,\n        address indexed tokenIn,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @notice Constructor sets the token pair\n     * @param _tokenA Address of first token\n     * @param _tokenB Address of second token\n     */\n    constructor(address _tokenA, address _tokenB) {\n        require(_tokenA != address(0) && _tokenB != address(0), \"Invalid token address\");\n        require(_tokenA != _tokenB, \"Tokens must be different\");\n\n        tokenA = IERC20(_tokenA);\n        tokenB = IERC20(_tokenB);\n    }\n\n    /**\n     * @notice Add liquidity to the pool\n     * @param amountA Amount of token A to add\n     * @param amountB Amount of token B to add\n     * @return liquidityMinted Amount of liquidity shares minted\n     */\n    function addLiquidity(uint256 amountA, uint256 amountB)\n        external\n        nonReentrant\n        returns (uint256 liquidityMinted)\n    {\n        require(amountA > 0 && amountB > 0, \"Amounts must be greater than 0\");\n\n        // Transfer tokens from user to contract\n        tokenA.transferFrom(msg.sender, address(this), amountA);\n        tokenB.transferFrom(msg.sender, address(this), amountB);\n\n        // Calculate liquidity to mint\n        if (totalLiquidity == 0) {\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\n            // We use a simple formula: liquidity = amountA (for simplicity)\n            liquidityMinted = amountA;\n        } else {\n            // Subsequent liquidity: maintain pool ratio\n            // liquidityMinted = (amountA / reserveA) * totalLiquidity\n            // We take the minimum to prevent manipulation\n            uint256 liquidityA = (amountA * totalLiquidity) / reserveA;\n            uint256 liquidityB = (amountB * totalLiquidity) / reserveB;\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\n        }\n\n        require(liquidityMinted > 0, \"Insufficient liquidity minted\");\n\n        // Update state\n        liquidity[msg.sender] += liquidityMinted;\n        totalLiquidity += liquidityMinted;\n        reserveA += amountA;\n        reserveB += amountB;\n\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool\n     * @param liquidityAmount Amount of liquidity shares to burn\n     * @return amountA Amount of token A returned\n     * @return amountB Amount of token B returned\n     */\n    function removeLiquidity(uint256 liquidityAmount)\n        external\n        nonReentrant\n        returns (uint256 amountA, uint256 amountB)\n    {\n        require(liquidityAmount > 0, \"Amount must be greater than 0\");\n        require(liquidity[msg.sender] >= liquidityAmount, \"Insufficient liquidity\");\n\n        // Calculate amounts to return (proportional to share)\n        amountA = (liquidityAmount * reserveA) / totalLiquidity;\n        amountB = (liquidityAmount * reserveB) / totalLiquidity;\n\n        require(amountA > 0 && amountB > 0, \"Insufficient liquidity burned\");\n\n        // Update state\n        liquidity[msg.sender] -= liquidityAmount;\n        totalLiquidity -= liquidityAmount;\n        reserveA -= amountA;\n        reserveB -= amountB;\n\n        // Transfer tokens back to user\n        tokenA.transfer(msg.sender, amountA);\n        tokenB.transfer(msg.sender, amountB);\n\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\n    }\n\n    /**\n     * @notice Swap one token for another\n     * @param tokenIn Address of token to swap in\n     * @param amountIn Amount of token to swap in\n     * @return amountOut Amount of token received\n     */\n    function swap(address tokenIn, uint256 amountIn)\n        external\n        nonReentrant\n        returns (uint256 amountOut)\n    {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\n            \"Invalid token\"\n        );\n\n        // Determine input/output tokens and reserves\n        bool isTokenA = tokenIn == address(tokenA);\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n\n        // Transfer input token from user\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\n\n        // Calculate output amount with fee\n        // Formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n        // With 0.3% fee: amountIn = amountIn * (1 - 0.003) = amountIn * 997/1000\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\n        amountOut = numerator / denominator;\n\n        require(amountOut > 0, \"Insufficient output amount\");\n        require(amountOut < reserveOut, \"Insufficient liquidity\");\n\n        // Update reserves\n        if (isTokenA) {\n            reserveA += amountIn;\n            reserveB -= amountOut;\n        } else {\n            reserveB += amountIn;\n            reserveA -= amountOut;\n        }\n\n        // Transfer output token to user\n        tokenOutContract.transfer(msg.sender, amountOut);\n\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut);\n    }\n\n    /**\n     * @notice Calculate swap output amount (view function)\n     * @param tokenIn Address of token to swap in\n     * @param amountIn Amount of token to swap in\n     * @return amountOut Estimated amount of token to receive\n     */\n    function getSwapAmount(address tokenIn, uint256 amountIn)\n        external\n        view\n        returns (uint256 amountOut)\n    {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\n            \"Invalid token\"\n        );\n\n        // Determine reserves\n        bool isTokenA = tokenIn == address(tokenA);\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n\n        // Calculate output with fee\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @notice Get current pool state\n     * @return _reserveA Reserve of token A\n     * @return _reserveB Reserve of token B\n     * @return _totalLiquidity Total liquidity shares\n     */\n    function getReserves()\n        external\n        view\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\n    {\n        return (reserveA, reserveB, totalLiquidity);\n    }\n\n    /**\n     * @notice Get user's liquidity position\n     * @param user Address to check\n     * @return liquidityAmount User's liquidity shares\n     * @return sharePercentage User's percentage of pool (in basis points, e.g., 1000 = 10%)\n     */\n    function getUserLiquidity(address user)\n        external\n        view\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\n    {\n        liquidityAmount = liquidity[user];\n        sharePercentage = totalLiquidity > 0\n            ? (liquidityAmount * 10000) / totalLiquidity\n            : 0;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}