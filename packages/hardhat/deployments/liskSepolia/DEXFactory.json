{
  "address": "0xbbFfF35F9203707c80b46C3B8F8aCEAa7d12C67A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairCount",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4987411e23e81991f4e14355f7395f88199562ef9e3ceb3f5ee11c21405297e8",
  "receipt": {
    "to": null,
    "from": "0xAA4ADd68289429Ace79b8c8219E733a6667A5F5c",
    "contractAddress": "0xbbFfF35F9203707c80b46C3B8F8aCEAa7d12C67A",
    "transactionIndex": 1,
    "gasUsed": "2521968",
    "logsBloom": "0x
    "blockHash": "0x70a405c0c507cdeab863efdecdbdcef488957c78a9898c813ce0b18614520d4b",
    "transactionHash": "0x4987411e23e81991f4e14355f7395f88199562ef9e3ceb3f5ee11c21405297e8",
    "logs": [],
    "blockNumber": 27987054,
    "cumulativeGasUsed": "2568076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6874775def4ea22c2b8f71dc892b17e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairCount\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Inspired by Uniswap V2 Factory pattern\",\"kind\":\"dev\",\"methods\":{\"allPairsLength()\":{\"returns\":{\"_0\":\"Total pair count\"}},\"createPair(address,address)\":{\"params\":{\"tokenA\":\"Address of first token\",\"tokenB\":\"Address of second token\"},\"returns\":{\"pair\":\"Address of the created DEX pair\"}}},\"title\":\"DEXFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allPairsLength()\":{\"notice\":\"Get total number of pairs created\"},\"createPair(address,address)\":{\"notice\":\"Create a new DEX pair for two tokens\"}},\"notice\":\"Factory contract to create and manage multiple DEX pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXFactory.sol\":\"DEXFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SimpleDEXV2.sol\\\";\\n\\n/**\\n * @title DEXFactory\\n * @notice Factory contract to create and manage multiple DEX pairs\\n * @dev Inspired by Uniswap V2 Factory pattern\\n */\\ncontract DEXFactory {\\n    // Mapping to track all created pairs: token0 => token1 => pair address\\n    mapping(address => mapping(address => address)) public getPair;\\n\\n    // Array of all pairs created\\n    address[] public allPairs;\\n\\n    // Events\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256 pairCount\\n    );\\n\\n    /**\\n     * @notice Create a new DEX pair for two tokens\\n     * @param tokenA Address of first token\\n     * @param tokenB Address of second token\\n     * @return pair Address of the created DEX pair\\n     */\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"DEXFactory: IDENTICAL_ADDRESSES\\\");\\n\\n        // Sort tokens to ensure consistent pair addressing\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n\\n        require(token0 != address(0), \\\"DEXFactory: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"DEXFactory: PAIR_EXISTS\\\");\\n\\n        // Deploy new SimpleDEXV2 contract\\n        SimpleDEXV2 dex = new SimpleDEXV2(token0, token1);\\n        pair = address(dex);\\n\\n        // Populate mapping in both directions\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /**\\n     * @notice Get total number of pairs created\\n     * @return Total pair count\\n     */\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n}\\n\",\"keccak256\":\"0xb909c37352b9b4a77406e4636a37f211f47550bfddb18cd7b9c54d5c82b75594\",\"license\":\"MIT\"},\"contracts/SimpleDEXV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleDEXV2\\n * @notice Advanced DEX with ERC20 LP tokens, fee distribution, TWAP, and slippage protection\\n * @dev Upgraded version with all advanced features\\n */\\ncontract SimpleDEXV2 is ERC20, ReentrancyGuard {\\n    // Token addresses\\n    IERC20 public immutable tokenA;\\n    IERC20 public immutable tokenB;\\n\\n    // Pool reserves\\n    uint256 public reserveA;\\n    uint256 public reserveB;\\n\\n    // Fee tracking (0.3% = 3/1000)\\n    uint256 public constant FEE_NUMERATOR = 3;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    // Accumulated fees for LP providers\\n    uint256 public accumulatedFeesA;\\n    uint256 public accumulatedFeesB;\\n\\n    // TWAP: Time-Weighted Average Price Oracle\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 priceACumulative;\\n        uint256 priceBCumulative;\\n    }\\n    Observation[] public observations;\\n    uint256 private constant OBSERVATION_WINDOW = 24 hours;\\n\\n    // Last price update timestamp\\n    uint256 public lastPriceUpdate;\\n\\n    // Events\\n    event LiquidityAdded(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityMinted\\n    );\\n    event LiquidityRemoved(\\n        address indexed provider,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidityBurned\\n    );\\n    event Swap(\\n        address indexed user,\\n        address indexed tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 priceImpact\\n    );\\n    event FeesClaimed(\\n        address indexed provider,\\n        uint256 feeA,\\n        uint256 feeB\\n    );\\n\\n    /**\\n     * @notice Constructor sets the token pair and creates LP token\\n     * @param _tokenA Address of first token\\n     * @param _tokenB Address of second token\\n     */\\n    constructor(address _tokenA, address _tokenB)\\n        ERC20(\\\"SimpleDEX LP\\\", \\\"SLP-LP\\\")\\n    {\\n        require(_tokenA != address(0) && _tokenB != address(0), \\\"Invalid token address\\\");\\n        require(_tokenA != _tokenB, \\\"Tokens must be different\\\");\\n\\n        tokenA = IERC20(_tokenA);\\n        tokenB = IERC20(_tokenB);\\n        lastPriceUpdate = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param amountA Amount of token A to add\\n     * @param amountB Amount of token B to add\\n     * @return liquidityMinted Amount of LP tokens minted\\n     */\\n    function addLiquidity(uint256 amountA, uint256 amountB)\\n        external\\n        nonReentrant\\n        returns (uint256 liquidityMinted)\\n    {\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n        // Update TWAP before changing reserves\\n        _updatePrice();\\n\\n        // Transfer tokens from user to contract\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\n\\n        // Calculate liquidity to mint\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\\n            liquidityMinted = _sqrt(amountA * amountB);\\n        } else {\\n            // Subsequent liquidity: maintain pool ratio\\n            uint256 liquidityA = (amountA * _totalSupply) / reserveA;\\n            uint256 liquidityB = (amountB * _totalSupply) / reserveB;\\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\\n        }\\n\\n        require(liquidityMinted > 0, \\\"Insufficient liquidity minted\\\");\\n\\n        // Mint LP tokens to user\\n        _mint(msg.sender, liquidityMinted);\\n\\n        // Update reserves\\n        reserveA += amountA;\\n        reserveB += amountB;\\n\\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool\\n     * @param liquidityAmount Amount of LP tokens to burn\\n     * @return amountA Amount of token A returned\\n     * @return amountB Amount of token B returned\\n     */\\n    function removeLiquidity(uint256 liquidityAmount)\\n        external\\n        nonReentrant\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        require(liquidityAmount > 0, \\\"Amount must be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= liquidityAmount, \\\"Insufficient liquidity\\\");\\n\\n        // Update TWAP before changing reserves\\n        _updatePrice();\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        // Calculate amounts to return (proportional to share)\\n        amountA = (liquidityAmount * reserveA) / _totalSupply;\\n        amountB = (liquidityAmount * reserveB) / _totalSupply;\\n\\n        require(amountA > 0 && amountB > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Burn LP tokens\\n        _burn(msg.sender, liquidityAmount);\\n\\n        // Update reserves\\n        reserveA -= amountA;\\n        reserveB -= amountB;\\n\\n        // Transfer tokens back to user\\n        tokenA.transfer(msg.sender, amountA);\\n        tokenB.transfer(msg.sender, amountB);\\n\\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\\n    }\\n\\n    /**\\n     * @notice Swap one token for another with slippage protection\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @param minAmountOut Minimum output amount (slippage protection)\\n     * @return amountOut Amount of token received\\n     */\\n    function swap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) external nonReentrant returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        // Update TWAP before swap\\n        _updatePrice();\\n\\n        // Determine input/output tokens and reserves\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        // Calculate price impact BEFORE swap\\n        uint256 priceImpact = _calculatePriceImpact(amountIn, reserveIn, reserveOut);\\n\\n        // Transfer input token from user\\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\\n\\n        // Calculate output amount with fee\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n\\n        require(amountOut > 0, \\\"Insufficient output amount\\\");\\n        require(amountOut >= minAmountOut, \\\"Slippage exceeded\\\");\\n        require(amountOut < reserveOut, \\\"Insufficient liquidity\\\");\\n\\n        // Calculate fee\\n        uint256 feeAmount = (amountIn * FEE_NUMERATOR) / FEE_DENOMINATOR;\\n\\n        // Update accumulated fees\\n        if (isTokenA) {\\n            accumulatedFeesA += feeAmount;\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            accumulatedFeesB += feeAmount;\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n\\n        // Transfer output token to user\\n        tokenOutContract.transfer(msg.sender, amountOut);\\n\\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut, priceImpact);\\n    }\\n\\n    /**\\n     * @notice Claim accumulated fees proportional to LP share\\n     * @return feeA Amount of token A fees claimed\\n     * @return feeB Amount of token B fees claimed\\n     */\\n    function claimFees() external nonReentrant returns (uint256 feeA, uint256 feeB) {\\n        uint256 userBalance = balanceOf(msg.sender);\\n        require(userBalance > 0, \\\"No liquidity\\\");\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        // Calculate user's share of fees\\n        uint256 userShare = (userBalance * 10000) / _totalSupply;\\n        feeA = (accumulatedFeesA * userShare) / 10000;\\n        feeB = (accumulatedFeesB * userShare) / 10000;\\n\\n        require(feeA > 0 || feeB > 0, \\\"No fees to claim\\\");\\n\\n        // Transfer fees to user\\n        if (feeA > 0) {\\n            tokenA.transfer(msg.sender, feeA);\\n        }\\n        if (feeB > 0) {\\n            tokenB.transfer(msg.sender, feeB);\\n        }\\n\\n        emit FeesClaimed(msg.sender, feeA, feeB);\\n    }\\n\\n    /**\\n     * @notice Calculate swap output amount (view function)\\n     * @param tokenIn Address of token to swap in\\n     * @param amountIn Amount of token to swap in\\n     * @return amountOut Estimated amount of token to receive\\n     */\\n    function getSwapAmount(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\\n            \\\"Invalid token\\\"\\n        );\\n\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Get current pool state\\n     */\\n    function getReserves()\\n        external\\n        view\\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\\n    {\\n        return (reserveA, reserveB, totalSupply());\\n    }\\n\\n    /**\\n     * @notice Get user's liquidity position\\n     */\\n    function getUserLiquidity(address user)\\n        external\\n        view\\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\\n    {\\n        liquidityAmount = balanceOf(user);\\n        uint256 _totalSupply = totalSupply();\\n        sharePercentage = _totalSupply > 0\\n            ? (liquidityAmount * 10000) / _totalSupply\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Calculate price impact of a swap\\n     * @param amountIn Input amount\\n     * @param tokenIn Address of token to swap in\\n     * @return priceImpact Price impact in basis points (e.g., 500 = 5%)\\n     */\\n    function calculatePriceImpact(\\n        uint256 amountIn,\\n        address tokenIn\\n    ) external view returns (uint256 priceImpact) {\\n        bool isTokenA = tokenIn == address(tokenA);\\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        return _calculatePriceImpact(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice Internal function to calculate price impact\\n     */\\n    function _calculatePriceImpact(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        // Price impact = ((outputAmount * reserveIn) / (inputAmount * reserveOut) - 1) * 100\\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n        uint256 outputAmount = numerator / denominator;\\n\\n        // Calculate price impact in basis points\\n        uint256 idealOutput = (amountIn * reserveOut) / reserveIn;\\n        if (idealOutput == 0) return 0;\\n\\n        uint256 impact = ((idealOutput - outputAmount) * 10000) / idealOutput;\\n        return impact;\\n    }\\n\\n    /**\\n     * @notice Update TWAP price observations\\n     */\\n    function _updatePrice() internal {\\n        uint256 timeElapsed = block.timestamp - lastPriceUpdate;\\n\\n        if (timeElapsed > 0 && reserveA > 0 && reserveB > 0) {\\n            // Calculate cumulative prices\\n            uint256 priceACumulative = (reserveB * 1e18) / reserveA;\\n            uint256 priceBCumulative = (reserveA * 1e18) / reserveB;\\n\\n            // Add observation\\n            observations.push(Observation({\\n                timestamp: block.timestamp,\\n                priceACumulative: priceACumulative,\\n                priceBCumulative: priceBCumulative\\n            }));\\n\\n            // Remove old observations (keep only last 24 hours)\\n            _pruneOldObservations();\\n\\n            lastPriceUpdate = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove observations older than OBSERVATION_WINDOW\\n     */\\n    function _pruneOldObservations() internal {\\n        uint256 cutoffTime = block.timestamp - OBSERVATION_WINDOW;\\n        uint256 i = 0;\\n\\n        while (i < observations.length && observations[i].timestamp < cutoffTime) {\\n            i++;\\n        }\\n\\n        if (i > 0) {\\n            for (uint256 j = 0; j < observations.length - i; j++) {\\n                observations[j] = observations[j + i];\\n            }\\n            for (uint256 k = 0; k < i; k++) {\\n                observations.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get TWAP for a specific period\\n     * @param period Time period in seconds\\n     * @return twapPriceA Time-weighted average price of A in terms of B\\n     * @return twapPriceB Time-weighted average price of B in terms of A\\n     */\\n    function getTWAP(uint256 period)\\n        external\\n        view\\n        returns (uint256 twapPriceA, uint256 twapPriceB)\\n    {\\n        require(observations.length >= 2, \\\"Insufficient observations\\\");\\n        require(period <= OBSERVATION_WINDOW, \\\"Period too long\\\");\\n\\n        uint256 targetTime = block.timestamp - period;\\n\\n        // Find oldest observation within period\\n        uint256 oldestIndex = observations.length - 1;\\n        for (uint256 i = 0; i < observations.length; i++) {\\n            if (observations[i].timestamp >= targetTime) {\\n                oldestIndex = i;\\n                break;\\n            }\\n        }\\n\\n        Observation memory oldest = observations[oldestIndex];\\n        Observation memory newest = observations[observations.length - 1];\\n\\n        uint256 timeElapsed = newest.timestamp - oldest.timestamp;\\n        require(timeElapsed > 0, \\\"No time elapsed\\\");\\n\\n        twapPriceA = (newest.priceACumulative - oldest.priceACumulative) / timeElapsed;\\n        twapPriceB = (newest.priceBCumulative - oldest.priceBCumulative) / timeElapsed;\\n    }\\n\\n    /**\\n     * @notice Square root function (Babylonian method)\\n     */\\n    function _sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 z = (x + 1) / 2;\\n        uint256 y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        return y;\\n    }\\n}\\n\",\"keccak256\":\"0xb52dd7097ad7341402966ab47bbcbef030c1ea642cb15fee4e450af7fb59c2ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631e3dd18b14610051578063574f2ba314610081578063c9c6539614610092578063e6a43905146100a5575b600080fd5b61006461005f366004610385565b6100d6565b6040516001600160a01b0390911681526020015b60405180910390f35b600154604051908152602001610078565b6100646100a03660046103ba565b610100565b6100646100b33660046103ba565b60006020818152928152604080822090935290815220546001600160a01b031681565b600181815481106100e657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000816001600160a01b0316836001600160a01b0316036101685760405162461bcd60e51b815260206004820152601f60248201527f444558466163746f72793a204944454e544943414c5f4144445245535345530060448201526064015b60405180910390fd5b600080836001600160a01b0316856001600160a01b03161061018b57838561018e565b84845b90925090506001600160a01b0382166101e95760405162461bcd60e51b815260206004820152601860248201527f444558466163746f72793a205a45524f5f414444524553530000000000000000604482015260640161015f565b6001600160a01b038281166000908152602081815260408083208585168452909152902054161561025c5760405162461bcd60e51b815260206004820152601760248201527f444558466163746f72793a20504149525f455849535453000000000000000000604482015260640161015f565b6000828260405161026c90610378565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561029f573d6000803e3d6000fd5b506001600160a01b0384811660008181526020818152604080832088861680855290835281842080546001600160a01b031990811697891697881790915584845282852086865284528285208054821688179055600180548082018255958190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690950180549091168717905592548151958652918501919091529397508794509290917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a350505092915050565b6128a9806103ee83390190565b60006020828403121561039757600080fd5b5035919050565b80356001600160a01b03811681146103b557600080fd5b919050565b600080604083850312156103cd57600080fd5b6103d68361039e565b91506103e46020840161039e565b9050925092905056fe60c06040523480156200001157600080fd5b50604051620028a9380380620028a98339810160408190526200003491620001af565b6040518060400160405280600c81526020016b053696d706c65444558204c560a41b815250604051806040016040528060068152602001650534c502d4c560d41b81525081600390816200008991906200028c565b5060046200009882826200028c565b50506001600555506001600160a01b03821615801590620000c157506001600160a01b03811615155b620001135760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b031603620001765760405162461bcd60e51b815260206004820152601860248201527f546f6b656e73206d75737420626520646966666572656e74000000000000000060448201526064016200010a565b6001600160a01b039182166080521660a05242600b5562000358565b80516001600160a01b0381168114620001aa57600080fd5b919050565b60008060408385031215620001c357600080fd5b620001ce8362000192565b9150620001de6020840162000192565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021257607f821691505b6020821081036200023357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028757600081815260208120601f850160051c81016020861015620002625750805b601f850160051c820191505b8181101562000283578281556001016200026e565b5050505b505050565b81516001600160401b03811115620002a857620002a8620001e7565b620002c081620002b98454620001fd565b8462000239565b602080601f831160018114620002f85760008415620002df5750858301515b600019600386901b1c1916600185901b17855562000283565b600085815260208120601f198616915b82811015620003295788860151825594840194600190910190840162000308565b5085821015620003485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516124b4620003f56000396000818161030e0152818161057f015281816109ab01528181610b9c01528181610dcc01528181610e8701528181610eef01526114ca01526000818161024801528181610544015281816105f3015281816107220152818161091901528181610b0401528181610d9101528181610e4801528181610ea801528181610ece015261143101526124b46000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063a457c2d7116100a2578063dbbdd93511610071578063dbbdd9351461040b578063dc5fa6c51461041e578063dd62ed3e14610427578063f30d3d1b1461043a57600080fd5b8063a457c2d7146103d4578063a9059cbb146103e7578063d294f093146103fa578063d73792a91461040257600080fd5b806395d89b41116100de57806395d89b411461037e5780639c8f9f23146103865780639cd441da146103ae5780639f1d0f59146103c157600080fd5b806370a08231146103395780637105c19f14610362578063923e1e9d1461036b57600080fd5b806323b872dd1161017c57806341cd47bf1161014b57806341cd47bf146102f8578063455d48f5146103005780635f64b55b146103095780636949faeb1461033057600080fd5b806323b872dd146102b0578063252c09d7146102c3578063313ce567146102d657806339509351146102e557600080fd5b80630fc63d10116101b85780630fc63d101461024357806318160ddd1461028257806319e36f3b146102945780631befa6db1461029d57600080fd5b806306fdde03146101df5780630902f1ac146101fd578063095ea7b314610220575b600080fd5b6101e761044d565b6040516101f49190612182565b60405180910390f35b6102056104df565b604080519384526020840192909252908201526060016101f4565b61023361022e3660046121ec565b6104fe565b60405190151581526020016101f4565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f4565b6002545b6040519081526020016101f4565b61028660075481565b6102866102ab3660046121ec565b610518565b6102336102be366004612216565b6106a2565b6102056102d1366004612252565b6106c8565b604051601281526020016101f4565b6102336102f33660046121ec565b6106fb565b610286600381565b61028660085481565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b610286600b5481565b61028661034736600461226b565b6001600160a01b031660009081526020819052604090205490565b61028660095481565b610286610379366004612286565b61071d565b6101e761078a565b610399610394366004612252565b610799565b604080519283526020830191909152016101f4565b6102866103bc3660046122b2565b610a74565b6102866103cf3660046122d4565b610d65565b6102336103e23660046121ec565b611274565b6102336103f53660046121ec565b6112fa565b610399611308565b6102866103e881565b61039961041936600461226b565b61158d565b61028660065481565b610286610435366004612307565b6115da565b610399610448366004612252565b611605565b60606003805461045c90612331565b80601f016020809104026020016040519081016040528092919081815260200182805461048890612331565b80156104d55780601f106104aa576101008083540402835291602001916104d5565b820191906000526020600020905b8154815290600101906020018083116104b857829003601f168201915b5050505050905090565b60008060006006546007546104f360025490565b925092509250909192565b60003361050c818585611861565b60019150505b92915050565b60008082116105425760405162461bcd60e51b81526004016105399061236b565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806105b357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6105ef5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610539565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161490506000808261063b57600754600654610642565b6006546007545b9092509050600061065660036103e86123b8565b61066090876123cb565b9050600061066e83836123cb565b905060008261067f6103e8876123cb565b61068991906123e2565b905061069581836123f5565b9998505050505050505050565b6000336106b0858285611986565b6106bb858585611a00565b60019150505b9392505050565b600a81815481106106d857600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60003361050c81858561070e83836115da565b61071891906123e2565b611861565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161490506000808261076a57600754600654610771565b6006546007545b91509150610780868383611ba4565b9695505050505050565b60606004805461045c90612331565b6000806107a4611c57565b600083116107c45760405162461bcd60e51b81526004016105399061236b565b3360009081526020819052604090205483111561081c5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610539565b610824611cb0565b600061082f60025490565b9050806006548561084091906123cb565b61084a91906123f5565b9250806007548561085b91906123cb565b61086591906123f5565b91506000831180156108775750600082115b6108c35760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e65640000006044820152606401610539565b6108cd3385611dea565b82600660008282546108df91906123b8565b9250508190555081600760008282546108f891906123b8565b909155505060405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190612417565b5060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190612417565b50604080518481526020810184905290810185905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060600160405180910390a250610a6f6001600555565b915091565b6000610a7e611c57565b600083118015610a8e5750600082115b610ada5760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e203000006044820152606401610539565b610ae2611cb0565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b799190612417565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190612417565b506000610c1d60025490565b905080600003610c4057610c39610c3484866123cb565b611f19565b9150610c8d565b600654600090610c5083876123cb565b610c5a91906123f5565b905060006007548386610c6d91906123cb565b610c7791906123f5565b9050808210610c865780610c88565b815b935050505b60008211610cdd5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e7465640000006044820152606401610539565b610ce73383611f7a565b8360066000828254610cf991906123e2565b925050819055508260076000828254610d1291906123e2565b9091555050604080518581526020810185905290810183905233907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a2506105126001600555565b6000610d6f611c57565b60008311610d8f5760405162461bcd60e51b81526004016105399061236b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480610e0057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b610e3c5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610539565b610e44611cb0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614905060008082610ecc577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610f0f565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b9150915060008084610f2657600754600654610f2d565b6006546007545b915091506000610f3e898484611ba4565b6040516323b872dd60e01b8152336004820152306024820152604481018b90529091506001600160a01b038616906323b872dd906064016020604051808303816000875af1158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb89190612417565b506000610fc860036103e86123b8565b610fd2908b6123cb565b90506000610fe084836123cb565b9050600082610ff16103e8886123cb565b610ffb91906123e2565b905061100781836123f5565b995060008a116110595760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610539565b8a8a101561109d5760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b6044820152606401610539565b848a106110e55760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610539565b60006103e86110f560038f6123cb565b6110ff91906123f5565b9050891561115657806008600082825461111991906123e2565b925050819055508c6006600082825461113291906123e2565b925050819055508a6007600082825461114b91906123b8565b909155506111a09050565b806009600082825461116891906123e2565b925050819055508c6007600082825461118191906123e2565b925050819055508a6006600082825461119a91906123b8565b90915550505b60405163a9059cbb60e01b8152336004820152602481018c90526001600160a01b0389169063a9059cbb906044016020604051808303816000875af11580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190612417565b50604080518e8152602081018d90529081018690526001600160a01b038f169033907f9734819749a91fc3be03ea83205f924ee08479bd3f0da48efc91d94d050cac1e9060600160405180910390a3505050505050505050506106c16001600555565b6000338161128282866115da565b9050838110156112e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610539565b6112ef8286868403611861565b506001949350505050565b60003361050c818585611a00565b600080611313611c57565b336000908152602081905260409020548061135f5760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b6044820152606401610539565b600061136a60025490565b905060008161137b846127106123cb565b61138591906123f5565b90506127108160085461139891906123cb565b6113a291906123f5565b9450612710816009546113b591906123cb565b6113bf91906123f5565b935060008511806113d05750600084115b61140f5760405162461bcd60e51b815260206004820152601060248201526f4e6f206665657320746f20636c61696d60801b6044820152606401610539565b84156114a85760405163a9059cbb60e01b8152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a69190612417565b505b83156115415760405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612417565b505b604080518681526020810186905233917f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c7910160405180910390a25050506115896001600555565b9091565b6001600160a01b038116600090815260208190526040812054600254909190600081116115bb5760006115d2565b806115c8846127106123cb565b6115d291906123f5565b915050915091565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000806002600a80549050101561165e5760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74206f62736572766174696f6e73000000000000006044820152606401610539565b620151808311156116a35760405162461bcd60e51b815260206004820152600f60248201526e506572696f6420746f6f206c6f6e6760881b6044820152606401610539565b60006116af84426123b8565b600a549091506000906116c4906001906123b8565b905060005b600a548110156117185782600a82815481106116e7576116e7612439565b9060005260206000209060030201600001541061170657809150611718565b806117108161244f565b9150506116c9565b506000600a828154811061172e5761172e612439565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000600a6001600a8054905061177d91906123b8565b8154811061178d5761178d612439565b600091825260208083206040805160608101825260039094029091018054808552600182015493850193909352600201549083015284519193506117d191906123b8565b9050600081116118155760405162461bcd60e51b815260206004820152600f60248201526e139bc81d1a5b5948195b185c1cd959608a1b6044820152606401610539565b808360200151836020015161182a91906123b8565b61183491906123f5565b9650808360400151836040015161184b91906123b8565b61185591906123f5565b95505050505050915091565b6001600160a01b0383166118c35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610539565b6001600160a01b0382166119245760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610539565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061199284846115da565b905060001981146119fa57818110156119ed5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610539565b6119fa8484848403611861565b50505050565b6001600160a01b038316611a645760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610539565b6001600160a01b038216611ac65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610539565b6001600160a01b03831660009081526020819052604090205481811015611b3e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610539565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36119fa565b600080611bb460036103e86123b8565b611bbe90866123cb565b90506000611bcc84836123cb565b9050600082611bdd6103e8886123cb565b611be791906123e2565b90506000611bf582846123f5565b9050600087611c04888b6123cb565b611c0e91906123f5565b905080600003611c26576000955050505050506106c1565b600081611c3384826123b8565b611c3f906127106123cb565b611c4991906123f5565b9a9950505050505050505050565b600260055403611ca95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610539565b6002600555565b6000600b5442611cc091906123b8565b9050600081118015611cd457506000600654115b8015611ce257506000600754115b15611de7576000600654600754670de0b6b3a7640000611d0291906123cb565b611d0c91906123f5565b90506000600754600654670de0b6b3a7640000611d2991906123cb565b611d3391906123f5565b6040805160608101825242815260208101858152918101838152600a805460018101825560009190915291517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860039093029283015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a982015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa909101559050611de061203a565b505042600b555b50565b6001600160a01b038216611e4a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610539565b6001600160a01b03821660009081526020819052604090205481811015611ebe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610539565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611979565b505050565b600081600003611f2b57506000919050565b60006002611f3a8460016123e2565b611f4491906123f5565b9050825b808210156106c1575080600281611f5f81876123f5565b611f6991906123e2565b611f7391906123f5565b9150611f48565b6001600160a01b038216611fd05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610539565b8060026000828254611fe291906123e2565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b600061204962015180426123b8565b905060005b600a5481108015612082575081600a828154811061206e5761206e612439565b906000526020600020906003020160000154105b1561209957806120918161244f565b91505061204e565b80156120365760005b600a546120b09083906123b8565b81101561212e57600a6120c383836123e2565b815481106120d3576120d3612439565b9060005260206000209060030201600a82815481106120f4576120f4612439565b60009182526020909120825460039092020190815560018083015490820155600291820154910155806121268161244f565b9150506120a2565b5060005b81811015611f1457600a80548061214b5761214b612468565b600082815260208120600360001990930192830201818155600181018290556002015590558061217a8161244f565b915050612132565b600060208083528351808285015260005b818110156121af57858101830151858201604001528201612193565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146121e757600080fd5b919050565b600080604083850312156121ff57600080fd5b612208836121d0565b946020939093013593505050565b60008060006060848603121561222b57600080fd5b612234846121d0565b9250612242602085016121d0565b9150604084013590509250925092565b60006020828403121561226457600080fd5b5035919050565b60006020828403121561227d57600080fd5b6106c1826121d0565b6000806040838503121561229957600080fd5b823591506122a9602084016121d0565b90509250929050565b600080604083850312156122c557600080fd5b50508035926020909101359150565b6000806000606084860312156122e957600080fd5b6122f2846121d0565b95602085013595506040909401359392505050565b6000806040838503121561231a57600080fd5b612323836121d0565b91506122a9602084016121d0565b600181811c9082168061234557607f821691505b60208210810361236557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610512576105126123a2565b8082028115828204841417610512576105126123a2565b80820180821115610512576105126123a2565b60008261241257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561242957600080fd5b815180151581146106c157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201612461576124616123a2565b5060010190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220157daa67b324030cfe5f4ccdf0c2715d77440e950691f6bc56500e1b3cd0e29664736f6c63430008110033a2646970667358221220c5b425d0cda10cab986fb493bf2beeefca959f2bb9cef336e83506bc11147b0b64736f6c63430008110033",
  "devdoc": {
    "details": "Inspired by Uniswap V2 Factory pattern",
    "kind": "dev",
    "methods": {
      "allPairsLength()": {
        "returns": {
          "_0": "Total pair count"
        }
      },
      "createPair(address,address)": {
        "params": {
          "tokenA": "Address of first token",
          "tokenB": "Address of second token"
        },
        "returns": {
          "pair": "Address of the created DEX pair"
        }
      }
    },
    "title": "DEXFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allPairsLength()": {
        "notice": "Get total number of pairs created"
      },
      "createPair(address,address)": {
        "notice": "Create a new DEX pair for two tokens"
      }
    },
    "notice": "Factory contract to create and manage multiple DEX pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 899,
        "contract": "contracts/DEXFactory.sol:DEXFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 902,
        "contract": "contracts/DEXFactory.sol:DEXFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}